{
  "id": "guide/service-worker-getting-started",
  "title": "Service Worker 快速起步",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"getting-started-with-service-workers\">Getting started with service workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#getting-started-with-service-workers\"><i class=\"material-icons\">link</i></a></h1>\n<h1 translation-result=\"\" id=\"getting-started-with-service-workers\">Service Worker 快速起步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#getting-started-with-service-workers\"><i class=\"material-icons\">link</i></a></h1>\n<p translation-origin=\"off\">This document explains how to enable Angular service worker support in your CLI projects. It then uses a simple example to show you a service worker in action, demonstrating loading and basic caching. </p>\n<p translation-result=\"\">本文档解释了如何在 CLI 项目中启用对 Angular Service Worker 的支持。稍后它会用一个简单的范例来向你展示 Service Worker 实践，包括加载和基础的缓存功能。</p>\n<h4 translation-origin=\"off\" id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#prerequisites\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"prerequisites-14\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#prerequisites-14\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">A basic understanding of the following:</p>\n<p translation-result=\"\">对下列知识有基本的了解：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/service-worker-intro\">Introduction to Angular service workers</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/service-worker-intro\">Angular Service Worker 简介</a>.</p>\n</li>\n<li>\n<p translation-origin=\"off\">Angular v6, including Angular CLI v6.</p>\n<p translation-result=\"\"> Angular v6，也包括 Angular CLI v6。</p>\n</li>\n</ul>\n<hr>\n<h2 translation-origin=\"off\" id=\"adding-a-service-worker-to-your-project\">Adding a service worker to your project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#adding-a-service-worker-to-your-project\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"adding-a-service-worker-to-your-project\">为你的项目添加 Service Worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#adding-a-service-worker-to-your-project\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">To set up the Angular service worker in your project, use the CLI command <code>ng add @angular/pwa</code>. It takes care of configuring your app to use service workers by adding the <code>service-worker</code> package along\nwith setting up the necessary support files.</p>\n<p translation-result=\"\">要让你的项目支持 Angular Service Worker，可以使用 CLI 命令 <code>ng add @angular/pwa</code>。它会添加 <code>service-worker</code> 包，并建立必要的支持文件，小心翼翼地配置你的应用，以便使用 Service Worker。</p>\n<code-example language=\"sh\">\nng add  @angular/pwa --project *project-name* \n</code-example>\n<p translation-origin=\"off\">The above command completes the following actions:</p>\n<p translation-result=\"\">上述命令完成了如下步骤：</p>\n<ol>\n<li>\n<p translation-origin=\"off\">Adds the <code>@angular/service-worker</code> package to your project. </p>\n<p translation-result=\"\">把 @angular/service-worker 添加到你的项目中。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Enables service worker build support in the CLI.</p>\n<p translation-result=\"\">在 CLI 中启用 Service Worker 的构建支持。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Imports and registers the service worker in the app module.</p>\n<p translation-result=\"\">在应用模块中导入并注册 Service Worker。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Updates the <code>index.html</code> file:</p>\n<p translation-result=\"\">修改 <code>index.html</code> 文件：</p>\n<ul>\n<li>\n<p translation-origin=\"off\">Includes a link to add the <code>manifest.json</code> file.</p>\n<p translation-result=\"\"> 包含要添加到 <code>manifest.json</code> 文件中的链接。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Adds meta tags for <code>theme-color</code>.</p>\n<p translation-result=\"\"> 为 <code>theme-color</code> 添加 meta 标签。</p>\n</li>\n</ul>\n</li>\n<li>\n<p translation-origin=\"off\">Installs icon files to support the installed Progressive Web App (PWA).</p>\n<p translation-result=\"\">创建图标文件，以支持安装渐进式应用（PWA）。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Creates the service worker configuration file called <a href=\"/guide/service-worker-config\"><code>ngsw-config.json</code></a>, which specifies the caching behaviors and other settings. </p>\n<p translation-result=\"\">  创建一个名叫 <a href=\"/guide/service-worker-config\"><code>ngsw-config.json</code></a> 的 Service Worker 配置文件，它会用来指定缓存的行为以及其它设定。</p>\n<p translation-origin=\"off\">Now, build the project: </p>\n</li>\n</ol>\n<p translation-result=\"\">现在，构建本项目：</p>\n<code-example language=\"sh\">\nng build --prod\n</code-example>\n<p translation-origin=\"off\">The CLI project is now set up to use the Angular service worker.</p>\n<p translation-result=\"\">现在，这个 CLI 项目就可以使用 Angular Service Worker 了。</p>\n<h2 translation-origin=\"off\" id=\"service-worker-in-action-a-tour\">Service worker in action: a tour<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#service-worker-in-action-a-tour\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"service-worker-in-action-a-tour\">Service Worker 实战：向导<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#service-worker-in-action-a-tour\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">This section demonstrates a service worker in action,\nusing an example application. </p>\n<p translation-result=\"\">本节用一个范例应用来演示一下 Service Worker 实战。</p>\n<h3 translation-origin=\"off\" id=\"serving-with-http-server\">Serving with <code>http-server</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#serving-with-http-server\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"serving-with-codehttp-servercode\">用 <code>http-server</code> 启动开发服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#serving-with-codehttp-servercode\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Because <code>ng serve</code> does not work with service workers, you must use a separate HTTP server to test your project locally. You can use any HTTP server. The example below uses the <a href=\"https://www.npmjs.com/package/http-server\">http-server</a> package from npm. To reduce the possibility of conflicts, test on a dedicated port.</p>\n<p translation-result=\"\">由于 <code>ng serve</code> 对 Service Worker 无效，所以必须用一个独立的 HTTP 服务器在本地测试你的项目。\n你可以使用任何 HTTP 服务器。下面这个例子使用来自 npm 中的 <a href=\"https://www.npmjs.com/package/http-server\">http-server</a> 包。\n为了减小端口冲突的可能性，我们在一个专用端口上进行测试。</p>\n<p translation-origin=\"off\">To serve with <code>http-server</code>, change to the directory containing your web files and start the web server: </p>\n<p translation-result=\"\">要想使用 <code>http-server</code> 服务器，进入包含这些 web 文件的目录，并启动开发服务器：</p>\n<code-example language=\"sh\">\ncd dist\nhttp-server -p 8080\n</code-example>\n<h3 translation-origin=\"off\" id=\"initial-load\">Initial load<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#initial-load\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"initial-load\">最初的加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#initial-load\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">With the server running, you can point your browser at <a href=\"http://localhost:8080/\">http://localhost:8080/</a>. Your application should load normally.</p>\n<p translation-result=\"\">在服务器运行起来之后，你可以在浏览器中访问 <a href=\"http://localhost:8080/%E3%80%82%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8%E5%83%8F%E9%80%9A%E5%B8%B8%E4%B8%80%E6%A0%B7%E5%8A%A0%E8%BD%BD%E3%80%82\">http://localhost:8080/。你的应用像通常一样加载。</a></p>\n<p translation-origin=\"off\"><strong>Tip:</strong> When testing Angular service workers, it's a good idea to use an incognito or private window in your browser to ensure the service worker doesn't end up reading from a previous leftover state, which can cause unexpected behavior.</p>\n<p translation-result=\"\"><strong>提示：</strong> 当测试 Angular Service Worker 时，最好使用浏览器中的隐身或隐私窗口，以确保 Service Worker 不会从以前的残留状态中读取数据，否则可能导致意外的行为。</p>\n<h3 translation-origin=\"off\" id=\"simulating-a-network-issue\">Simulating a network issue<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#simulating-a-network-issue\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"simulating-a-network-issue\">模拟网络出问题<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#simulating-a-network-issue\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">To simulate a network issue, disable network interaction for your application. In Chrome: </p>\n<p translation-result=\"\">要想模拟网络出问题的情况，可以为你的应用禁用网络交互。在 Chrome 中：</p>\n<ol>\n<li>\n<p translation-origin=\"off\">Select <strong>Tools</strong> > <strong>Developer Tools</strong> (from the Chrome menu located at the top right corner).</p>\n<p translation-result=\"\">选择 <strong>Tools</strong> > <strong>Developer Tools</strong> （从右上角的 Chrome 菜单）。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Go to the <strong>Network tab</strong>.</p>\n<p translation-result=\"\">进入 <strong>Network 页</strong>。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Check the <strong>Offline box</strong>.</p>\n<p translation-result=\"\">勾选 <strong>Offline</strong> 复选框。</p>\n</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/service-worker/offline-checkbox.png\" alt=\"The offline checkbox in the Network tab is checked\" width=\"600\" height=\"62\">\n</figure>\n<p translation-origin=\"off\">Now the app has no access to network interaction.</p>\n<p translation-result=\"\">现在，本应用不能再和网络进行交互了。</p>\n<p translation-origin=\"off\">For applications that do not use the Angular service worker, refreshing now would display Chrome's Internet disconnected page that says \"There is no Internet connection\". </p>\n<p translation-result=\"\">对于那些不使用 Angular Service Worker 的应用，现在刷新将会显示 Chrome 的“网络中断”页，提示“没有可用的网络连接”。</p>\n<p translation-origin=\"off\">With the addition of an Angular service worker, the application behavior changes. On a refresh, the page loads normally. </p>\n<p translation-result=\"\">有了 Angular Service Worker，本应用的行为就不一样了。刷新时，页面会正常加载。</p>\n<p translation-origin=\"off\">If you look at the Network tab, you can verify that the service worker is active.</p>\n<p translation-result=\"\">如果你看看 Network 页，就会发现 Service Worker 是激活的。</p>\n<figure>\n  <img src=\"generated/images/guide/service-worker/sw-active.png\" alt=\"Requests are marked as from ServiceWorker\" width=\"630\" height=\"112\">\n</figure>\n<p translation-origin=\"off\">Notice that under the \"Size\" column, the requests state is <code>(from ServiceWorker)</code>. This means that the resources are not being loaded from the network. Instead, they are being loaded from the service worker's cache.</p>\n<p translation-result=\"\">注意，在 “Size” 列中，请求的状态是 <code>(from ServiceWorker)</code>。\n这表示该资源不是从网络上加载的，而是从 Service Worker 的缓存中。</p>\n<h3 translation-origin=\"off\" id=\"whats-being-cached\">What's being cached?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#whats-being-cached\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"whats-being-cached\">什么被缓存了？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#whats-being-cached\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Notice that all of the files the browser needs to render this application are cached. The <code>ngsw-config.json</code> boilerplate configuration is set up to cache the specific resources used by the CLI:</p>\n<p translation-result=\"\">注意，浏览器要渲染的所有这些文件都被缓存了。\n<code>ngsw-config.json</code> 样板文件被配置成了要缓存 CLI 用到的那些文件：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><code>index.html</code>.</p>\n</li>\n<li>\n<p translation-origin=\"off\"><code>favicon.ico</code>.</p>\n</li>\n<li>\n<p translation-origin=\"off\">Build artifacts (JS and CSS bundles).</p>\n<p translation-result=\"\"> 构建结果（JS 和 CSS 包）。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Anything under <code>assets</code>.</p>\n<p translation-result=\"\"> <code>assets</code> 下的所有文件。</p>\n</li>\n</ul>\n<h3 translation-origin=\"off\" id=\"making-changes-to-your-application\">Making changes to your application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#making-changes-to-your-application\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"making-changes-to-your-application\">修改你的应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#making-changes-to-your-application\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Now that you've seen how service workers cache your application, the\nnext step is understanding how updates work. </p>\n<p translation-result=\"\">现在，你已经看到了 Service Worker 如何缓存你的应用，接下来的步骤讲它如何进行更新。</p>\n<ol>\n<li>\n<p translation-origin=\"off\">If you're testing in an incognito window, open a second blank tab. This will keep the incognito and the cache state alive during your test.</p>\n<p translation-result=\"\">如果你正在隐身窗口中测试，请打开第二个空白页。这会让该隐身窗口和缓存的状态在测试期间持续活着。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Close the application tab, but not the window. This should also close the Developer Tools. </p>\n<p translation-result=\"\">关闭该应用的页面，而不是整个窗口。这也会同时关闭开发者工具。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Shut down <code>http-server</code>.</p>\n<p translation-result=\"\">关闭 <code>http-server</code>。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Next, make a change to the application, and watch the service worker install the update.</p>\n<p translation-result=\"\">接下来，对应用进行一些修改，并且观察 Service Worker 安装这些更新。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Open <code>src/app/app.component.html</code> for editing.</p>\n<p translation-result=\"\">打开 <code>src/app/app.component.html</code> 供编辑。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Change the text <code>Welcome to {{title}}!</code> to <code>Bienvenue à {{title}}!</code>.</p>\n<p translation-result=\"\">把文本 <code>Welcome to {{title}}!</code> 改为 <code>Bienvenue à {{title}}!</code>。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Build and run the server again:</p>\n<p translation-result=\"\">再次构建并运行此服务器：</p>\n</li>\n</ol>\n<code-example language=\"sh\">\nng build --prod\ncd dist\nhttp-server -p 8080\n</code-example>\n<h3 translation-origin=\"off\" id=\"updating-your-application-in-the-browser\">Updating your application in the browser<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#updating-your-application-in-the-browser\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"updating-your-application-in-the-browser\">在浏览器中更新你的应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#updating-your-application-in-the-browser\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Now look at how the browser and service worker handle the updated application.</p>\n<p translation-result=\"\">现在，看看浏览器和 Service Worker 如何处理这个更新后的应用。</p>\n<ol>\n<li>\n<p translation-origin=\"off\">Open <a href=\"http://localhost:8080\">http://localhost:8080</a> again in the same window. What happens?</p>\n<p translation-result=\"\">再次在同一个窗口中打开 <a href=\"http://localhost:8080\">http://localhost:8080</a>，发生了什么？</p>\n</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/service-worker/welcome-msg-en.png\" alt=\"It still says Welcome to Service Workers!\" width=\"411\" height=\"248\">\n</figure>\n<p translation-origin=\"off\">What went wrong? Nothing, actually. The Angular service worker is doing its job and serving the version of the application that it has <strong>installed</strong>, even though there is an update available. In the interest of speed, the service worker doesn't wait to check for updates before it serves the application that it has cached.</p>\n<p translation-result=\"\">错在哪里？哪里也没错，真的。Angular Service Worker 正在做自己的工作，并且用它<strong>已经安装过</strong>的版本提供服务，虽然，已经有新版本可用了。由于更关注速度，所以 Service Worker 并不会在启动它已经缓存过的版本之前先等待检查更新。</p>\n<p translation-origin=\"off\">If you look at the <code>http-server</code> logs, you can see the service worker requesting <code>/ngsw.json</code>. This is how the service worker checks for updates.</p>\n<p translation-result=\"\">如果你看看 <code>http-server</code> 的 log，就会发现 Service Worker 请求了 <code>/ngsw.json</code> 文件，这是 Service Worker 正在检查更新。</p>\n<ol start=\"2\">\n<li>\n<p translation-origin=\"off\">Refresh the page.</p>\n<p translation-result=\"\">刷新页面。</p>\n</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/service-worker/welcome-msg-fr.png\" alt=\"The text has changed to say Bienvenue à app!\" width=\"393\" height=\"240\">\n</figure>\n<p translation-origin=\"off\">The service worker installed the updated version of your app <em>in the background</em>, and the next time the page is loaded or reloaded, the service worker switches to the latest version.</p>\n<p translation-result=\"\">Service Worker <em>在后台</em>安装好了这个更新后的版本，下次加载或刷新页面时，Service Worker 就切换到最新的版本了。</p>\n<hr>\n<h2 translation-origin=\"off\" id=\"more-on-angular-service-workers\">More on Angular service workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#more-on-angular-service-workers\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"more-on-angular-service-workers-2\">关于 Angular Service Worker 的更多信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-getting-started#more-on-angular-service-workers-2\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">You may also be interested in the following:</p>\n<p translation-result=\"\">你可能还对下列内容感兴趣：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/service-worker-communications\">Communicating with service workers</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/service-worker-communications\">与 Service Worker 通讯</a>。</p>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/service-worker-communications\n - guide/service-worker-intro\n-->\n<!-- links from this doc:\n - /guide/service-worker-config\n - guide/service-worker-communications\n - guide/service-worker-getting-started#adding-a-service-worker-to-your-project\n - guide/service-worker-getting-started#getting-started-with-service-workers\n - guide/service-worker-getting-started#initial-load\n - guide/service-worker-getting-started#making-changes-to-your-application\n - guide/service-worker-getting-started#more-on-angular-service-workers\n - guide/service-worker-getting-started#more-on-angular-service-workers-2\n - guide/service-worker-getting-started#prerequisites\n - guide/service-worker-getting-started#prerequisites-14\n - guide/service-worker-getting-started#service-worker-in-action-a-tour\n - guide/service-worker-getting-started#serving-with-codehttp-servercode\n - guide/service-worker-getting-started#serving-with-http-server\n - guide/service-worker-getting-started#simulating-a-network-issue\n - guide/service-worker-getting-started#updating-your-application-in-the-browser\n - guide/service-worker-getting-started#whats-being-cached\n - guide/service-worker-intro\n - http://localhost:8080\n - http://localhost:8080/\n - http://localhost:8080/%E3%80%82%E4%BD%A0%E7%9A%84%E5%BA%94%E7%94%A8%E5%83%8F%E9%80%9A%E5%B8%B8%E4%B8%80%E6%A0%B7%E5%8A%A0%E8%BD%BD%E3%80%82\n - https://www.npmjs.com/package/http-server\n-->"
}