{
  "id": "guide/lazy-loading-ngmodules",
  "title": "惰性加载的特性模块",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"lazy-loading-feature-modules\">Lazy Loading Feature Modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n<h1 translation-result=\"\" id=\"lazy-loading-feature-modules\">惰性加载的特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n<h4 translation-origin=\"off\" id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#prerequisites\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"prerequisites-4\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#prerequisites-4\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">A basic understanding of the following:</p>\n<p translation-result=\"\">对下列知识有基本的了解：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/feature-modules\">Feature Modules</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/feature-modules\">特性模块</a></p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript Modules vs. NgModules</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 模块与 NgModules</a>。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/frequent-ngmodules\">Frequently Used Modules</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/frequent-ngmodules\">常用模块</a>。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/module-types\">Types of Feature Modules</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/module-types\">特性模块的分类</a>。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/router\">Routing and Navigation</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/router\">路由与导航</a>。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">For the final sample app with two lazy loaded modules that this page describes, see the\n<live-example></live-example>.</p>\n<p translation-result=\"\">如果需要本页描述的具有两个惰性加载模块的范例应用，参见<live-example></live-example>。</p>\n<hr>\n<h2 translation-origin=\"off\" id=\"high-level-view\">High level view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#high-level-view\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"high-level-view\">高层视角<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#high-level-view\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">There are three main steps to setting up a lazy loaded feature module:</p>\n<p translation-result=\"\">要想建立一个惰性加载的特性模块，有三个主要步骤：</p>\n<ol>\n<li>\n<p translation-origin=\"off\">Create the feature module.</p>\n<p translation-result=\"\">创建该特性模块。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Create the feature module’s routing module.</p>\n<p translation-result=\"\">创建该特性模块的路由模块。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Configure the routes.</p>\n<p translation-result=\"\">配置相关路由。</p>\n</li>\n</ol>\n<h2 translation-origin=\"off\" id=\"set-up-an-app\">Set up an app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-app\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"set-up-an-app\">建立应用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-app\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">If you don’t already have an app, you can follow the steps below to\ncreate one with the CLI. If you do already have an app, skip to\n<a href=\"guide/lazy-loading-ngmodules#config-routes\">Configure the routes</a>. Enter the following command\nwhere <code>customer-app</code> is the name of your app:</p>\n<p translation-result=\"\">如果你还没有应用，可以遵循下面的步骤使用 CLI 创建一个。如果已经有了，可以直接跳到 <a href=\"guide/lazy-loading-ngmodules#config-routes\">配置路由</a>部分。\n输入下列命令，其中的 <code>customer-app</code> 表示你的应用名称：</p>\n<code-example language=\"sh\">\nng new customer-app --routing\n</code-example>\n<p translation-origin=\"off\">This creates an app called <code>customer-app</code> and the <code>--routing</code> flag\ngenerates a file called <code>app-routing.module.ts</code>, which is one of\nthe files you need for setting up lazy loading for your feature module.\nNavigate into the project by issuing the command <code>cd customer-app</code>.</p>\n<p translation-result=\"\">这会创建一个名叫 <code>customer-app</code> 的应用，而 <code>--routing</code> 标识生成了一个名叫 <code>app-routing.module.ts</code> 的文件，它是你建立惰性加载的特性模块时所必须的。\n输入命令 <code>cd customer-app</code> 进入该项目。</p>\n<h2 translation-origin=\"off\" id=\"create-a-feature-module-with-routing\">Create a feature module with routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"create-a-feature-module-with-routing\">创建一个带路由的特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Next, you’ll need a feature module to route to. To make one, enter\nthe following command at the terminal window prompt where <code>customers</code> is the name of the module:</p>\n<p translation-result=\"\">接下来，你需要一个要路由到的特性模块。要生成一个，请输入下列命令，其中的 <code>customers</code> 是该模块的名字：</p>\n<code-example language=\"sh\">\nng generate module customers --routing\n</code-example>\n<p translation-origin=\"off\">This creates a customers folder with two files inside; <code>CustomersModule</code>\nand <code>CustomersRoutingModule</code>. <code>CustomersModule</code> will act as the gatekeeper\nfor anything that concerns customers. <code>CustomersRoutingModule</code> will handle\nany customer-related routing. This keeps the app’s structure organized as\nthe app grows and allows you to reuse this module while easily keeping its routing intact.</p>\n<p translation-result=\"\">这会创建一个 <code>customers</code> 目录，其中有两个文件：<code>CustomersModule</code> 和 <code>CustomersRoutingModule</code>。\n<code>CustomersModule</code> 扮演的是与客户紧密相关的所有事物的管理员。<code>CustomersRoutingModule</code> 则会处理任何与客户有关的路由。\n这样就可以在应用不断成长时保持应用的良好结构，并且当复用本模块时，你可以轻松的让其路由保持完好。</p>\n<p translation-origin=\"off\">The CLI imports the <code>CustomersRoutingModule</code> into the <code>CustomersModule</code> by\nadding a JavaScript import statement at the top of the file and adding\n<code>CustomersRoutingModule</code> to the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> <code>imports</code> array.</p>\n<p translation-result=\"\">CLI 会把 <code>CustomersRoutingModule</code> 自动导入到 <code>CustomersModule</code>。它会在文件的顶部添加一条 JavaScript 的 <code>import</code> 语句，并把 <code>CustomersRoutingModule</code> 添加到 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 数组中。</p>\n<h2 translation-origin=\"off\" id=\"add-a-component-to-the-feature-module\">Add a component to the feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-a-component-to-the-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"add-a-component-to-the-feature-module\">向特性模块中添加组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-a-component-to-the-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">In order to see the module being lazy loaded in the browser, create a component to render some HTML when the app loads <code>CustomersModule</code>. At the command line, enter the following:</p>\n<p translation-result=\"\">要想在浏览器中看出该模块惰性加载成功了，就创建一个组件用来在应用加载 <code>CustomersModule</code> 之后渲染出一些 HTML。在命令行中输入如下命令：</p>\n<code-example language=\"sh\">\nng generate component customers/customer-list\n</code-example>\n<p translation-origin=\"off\">This creates a folder inside of <code>customers</code> called <code>customer-list</code>\nwith the four files that make up the component.</p>\n<p translation-result=\"\">这会在 <code>customers</code> 目录中创建一个名叫 <code>customer-list</code> 的文件夹，其中包含该组件的四个文件。</p>\n<!-- For more information\nabout components, see [Components](). -->\n<p translation-origin=\"off\">Just like with the routing module, the CLI imports the\n<code>CustomerListComponent</code> into the <code>CustomersModule</code>.</p>\n<p translation-result=\"\">就像路由模块一样，CLI 也自动把 <code>CustomerListComponent</code> 导入了 <code>CustomersModule</code>。</p>\n<h2 translation-origin=\"off\" id=\"add-another-feature-module\">Add another feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"add-another-feature-module\">再添加一个特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">For another place to route to, create a second feature module with routing:</p>\n<p translation-result=\"\">为了提供另一个可路由到的地点，再创建第二个带路由的特性模块：</p>\n<code-example language=\"sh\">\nng generate module orders --routing\n</code-example>\n<p translation-origin=\"off\">This makes a new folder called <code>orders</code> containing an <code>OrdersModule</code> and an <code>OrdersRoutingModule</code>.</p>\n<p translation-result=\"\">这会创建一个名叫 <code>orders</code> 的新文件夹，其中包含 <code>OrdersModule</code> 和 <code>OrdersRoutingModule</code>。</p>\n<p translation-origin=\"off\">Now, just like with the <code>CustomersModule</code>, give it some content:</p>\n<p translation-result=\"\">现在，像 <code>CustomersModule</code> 一样，给它添加一些内容：</p>\n<code-example language=\"sh\">\nng generate component orders/order-list\n</code-example>\n<h2 translation-origin=\"off\" id=\"set-up-the-ui\">Set up the UI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"set-up-the-ui\">建立 UI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Though you can type the URL into the address bar, a nav\nis easier for the user and more common. Replace the default\nplaceholder markup in <code>app.component.html</code> with a custom nav\nso you can easily navigate to your modules in the browser:</p>\n<p translation-result=\"\">虽然你也可以在地址栏中输入 URL，不过导航菜单会更好用，而且更常见。\n把 <code>app.component.html</code> 中的占位脚本替换成一个自定义的导航，以便你在浏览器中能轻松地在模块之间导航。</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/app.component.html\" region=\"app-component-template\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1>\n  {{title}}\n&#x3C;/h1>\n\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/customers\">Customers&#x3C;/button>\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/orders\">Orders&#x3C;/button>\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"\">Home&#x3C;/button>\n\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n<p translation-origin=\"off\">To see your app in the browser so far, enter the following command in the terminal window:</p>\n<p translation-result=\"\">要想在浏览器中看到你的应用，就在终端窗口中输入下列命令：</p>\n<code-example language=\"sh\">\nng serve\n</code-example>\n<p translation-origin=\"off\">Then go to <code>localhost:4200</code> where you should see “app works!” and three buttons.</p>\n<p translation-result=\"\">然后，跳转到 <code>localhost:4200</code>，这时你应该看到 “app works!” 和三个按钮。</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/three-buttons.png\" width=\"300\" alt=\"three buttons in the browser\">\n</figure>\n<p translation-origin=\"off\">To make the buttons work, you need to configure the routing modules.</p>\n<p translation-result=\"\">要想让这些按钮生效，你需要配置一下这些路由模块。</p>\n<a id=\"config-routes\"></a>\n<h2 translation-origin=\"off\" id=\"configure-the-routes\">Configure the routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#configure-the-routes\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"configure-the-routes\">配置路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#configure-the-routes\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">The two feature modules, <code>OrdersModule</code> and <code>CustomersModule</code>, have to be\nwired up to the <code>AppRoutingModule</code> so the router knows about them. The structure is as follows:</p>\n<p translation-result=\"\">这两个特性模块（<code>OrdersModule</code> 和 <code>CustomersModule</code>）应该挂接到 <code>AppRoutingModule</code> 中，来让路由器知道它们。其结构如下：</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/lazy-load-relationship.jpg\" width=\"400\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p translation-origin=\"off\">Each feature module acts as a doorway via the router. In the <code>AppRoutingModule</code>, you configure the routes to the feature modules, in this case <code>OrdersModule</code> and <code>CustomersModule</code>. This way, the router knows to go to the feature module. The feature module then connects the <code>AppRoutingModule</code> to the <code>CustomersRoutingModule</code> or the <code>OrdersRoutingModule</code>. Those routing modules tell the router where to go to load relevant components.</p>\n<p translation-result=\"\">每个特性模块都是路由器中的一个“门口”。在 <code>AppRoutingModule</code> 中，你配置了一些路由指向这些特性模块（即 <code>OrderModule</code> 和 <code>CustomersModule</code>）。\n通过这种方式，路由器就知道了如何跳转到特性模块。然后，特性模块就把 <code>AppRoutingModule</code> 和 <code>CustomersRoutingModule</code> 或 <code>OrdersRoutingModule</code> 连接到一起。这些路由模块会告诉路由器该到哪里去加载相应的组件。</p>\n<h3 translation-origin=\"off\" id=\"routes-at-the-app-level\">Routes at the app level<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#routes-at-the-app-level\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"routes-at-the-app-level\">顶层的路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#routes-at-the-app-level\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">In <code>AppRoutingModule</code>, update the <code>routes</code> array with the following:</p>\n<p translation-result=\"\">在 <code>AppRoutingModule</code> 中，把 <code>routes</code> 数组修改成这样：</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" region=\"const-routes\" title=\"src/app/app-routing.module.ts\" linenums=\"false\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    loadChildren: 'app/customers/customers.module#CustomersModule'\n  },\n  {\n    path: 'orders',\n    loadChildren: 'app/orders/orders.module#OrdersModule'\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full'\n  }\n];\n\n</code-example>\n<p translation-origin=\"off\">The import statements stay the same. The first two paths are the routes to the <code>CustomersModule</code> and the <code>OrdersModule</code> respectively. Notice that the lazy loading syntax uses <code>loadChildren</code> followed by a string that is the path to the module, a hash mark or <code>#</code>, and the module’s class name.</p>\n<p translation-result=\"\">这些 <code>import</code> 语句没有变化。前两个路径分别路由到了 <code>CustomersModule</code> 和 <code>OrdersModule</code>。注意看惰性加载的语法：<code>loadChildren</code> 后面紧跟着一个字符串，它指向模块路径，然后是一个 <code>#</code>，然后是该模块的类名。</p>\n<h3 translation-origin=\"off\" id=\"inside-the-feature-module\">Inside the feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"inside-the-feature-module\">特性模块内部<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Next, take a look at <code>customers.module.ts</code>. If you’re using the CLI and following the steps outlined in this page, you don’t have to do anything here. The feature module is like a connector between the <code>AppRoutingModule</code> and the feature routing module. The <code>AppRoutingModule</code> imports the feature module, <code>CustomersModule</code>, and <code>CustomersModule</code> in turn imports the <code>CustomersRoutingModule</code>.</p>\n<p translation-result=\"\">接下来看看 <code>customers.module.ts</code>。如果你使用的是 CLI，并遵循本页面中给出的步骤，那么在这里你不必做任何事。\n特性模块就像是 <code>AppRoutingModule</code> 和该特性自己的路由模块之间的连接器。\n<code>AppRoutingModule</code> 导入了特性模块 <code>CustomersModule</code>，而 <code>CustomersModule</code> 又导入了 <code>CustomersRoutingModule</code>。</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/customers/customers.module.ts\" region=\"customers-module\" title=\"src/app/customers/customers.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomerListComponent } from './customer-list/customer-list.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    CustomersRoutingModule\n  ],\n  declarations: [CustomerListComponent]\n})\nexport class CustomersModule { }\n\n</code-example>\n<p translation-origin=\"off\">The <code>customers.module.ts</code> file imports the <code>CustomersRoutingModule</code> and <code>CustomerListComponent</code> so the <code>CustomersModule</code> class can have access to them. <code>CustomersRoutingModule</code> is then listed in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> <code>imports</code> array giving <code>CustomersModule</code> access to its own routing module, and <code>CustomerListComponent</code> is in the <code>declarations</code> array, which means <code>CustomerListComponent</code> belongs to the <code>CustomersModule</code>.</p>\n<p translation-result=\"\"><code>customers.module.ts</code> 文件导入了 <code>CustomersRoutingModule</code> 和 <code>CustomerListComponent</code>，所以 <code>CustomersModule</code> 类可以访问它们。\n接着 <code>CustomersRoutingModule</code> 出现在了 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 的 <code>imports</code> 数组中，这让 <code>CustomersModule</code> 可以访问它的路由模块。而 <code>CustomerListComponent</code> 出现在了 <code>declarations</code> 数组中，这表示 <code>CustomerListComponent</code> 属于 <code>CustomersModule</code>。</p>\n<h3 translation-origin=\"off\" id=\"configure-the-feature-modules-routes\">Configure the feature module’s routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#configure-the-feature-modules-routes\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"configure-the-feature-modules-routes\">配置该特性模块的路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#configure-the-feature-modules-routes\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The next step is in <code>customers-routing.module.ts</code>. First, import the component at the top of the file with the other JavaScript import statements. Then, add the route to <code>CustomerListComponent</code>.</p>\n<p translation-result=\"\">接下来的步骤位于 <code>customers-routing.module.ts</code> 中。首先，在文件的顶部使用 JS 的 <code>import</code> 语句导入该组件。然后添加指向 <code>CustomerListComponent</code> 的路由。</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/customers/customers-routing.module.ts\" region=\"customers-routing-module\" title=\"src/app/customers/customers-routing.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { CustomerListComponent } from './customer-list/customer-list.component';\n\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomerListComponent\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forChild(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class CustomersRoutingModule { }\n\n</code-example>\n<p translation-origin=\"off\">Notice that the <code>path</code> is set to an empty string. This is because the path in <code>AppRoutingModule</code> is already set to <code>customers</code>, so this route in the <code>CustomersRoutingModule</code>, is already within the <code>customers</code> context. Every route in this routing module is a child route.</p>\n<p translation-result=\"\">注意，<code>path</code> 被设置成了空字符串。这是因为 <code>AppRoutingModule</code> 中的路径已经设置为了 <code>customers</code>，所以 <code>CustomersRoutingModule</code> 中的这个路由定义已经位于 <code>customers</code> 这个上下文中了。也就是说这个路由模块中的每个路由其实都是子路由。</p>\n<p translation-origin=\"off\">Repeat this last step of importing the <code>OrdersListComponent</code> and configuring the Routes array for the <code>orders-routing.module.ts</code>:</p>\n<p translation-result=\"\">重复这个步骤以导入 <code>OrdersListComponent</code>，并为 <code>orders-routing.module.ts</code> 配置路由树组：</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/orders/orders-routing.module.ts\" region=\"orders-routing-module-detail\" title=\"src/app/orders/orders-routing.module.ts (excerpt)\" linenums=\"false\">\nimport { OrderListComponent } from './order-list/order-list.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: OrderListComponent\n  }\n];\n\n</code-example>\n<p translation-origin=\"off\">Now, if you view the app in the browser, the three buttons take you to each module.</p>\n<p translation-result=\"\">现在，如果你在浏览器中查看该应用，这三个按钮会把你带到每个模块去。</p>\n<h2 translation-origin=\"off\" id=\"confirm-its-working\">Confirm it’s working<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#confirm-its-working\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"confirm-its-working\">确认它工作正常<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#confirm-its-working\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">You can check to see that a module is indeed being lazy loaded with the Chrome developer tools. In Chrome, open the dev tools by pressing <code>Cmd+Option+i</code> on a Mac or <code>Ctrl+Alt+i</code> on a PC and go to the Network Tab.</p>\n<p translation-result=\"\">你可以使用 Chrome 开发者工具来确认一下这些模块真的是惰性加载的。\n在 Chrome 中，按 <code>Cmd+Option+i</code>（Mac）或 <code>Ctrl+Alt+i</code>（PC），并选中 <code>Network</code> 页标签。</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/network-tab.png\" width=\"600\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p translation-origin=\"off\">Click on the Orders or Customers button. If you see a chunk appear, you’ve wired everything up properly and the feature module is being lazy loaded. A chunk should appear for Orders and for Customers but will only appear once for each.</p>\n<p translation-result=\"\">点击 Orders 或 Customers 按钮。如果你看到某个 chunk 文件出现了，就表示你已经惰性加载并接入了这个特性模块。Orders 和 Customers 都应该出现一次 chunk，并且它们各自只应该出现一次。</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/chunk-arrow.png\" width=\"600\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p translation-origin=\"off\">To see it again, or to test after working in the project, clear everything out by clicking the circle with a line through it in the upper left of the Network Tab:</p>\n<p translation-result=\"\">要想再次查看它或测试本项目后面的行为，只要点击 Network 页左上放的“清除”图标即可。</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/clear.gif\" width=\"200\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p translation-origin=\"off\">Then reload with <code>Cmd+r</code> or <code>Ctrl+r</code>, depending on your platform.</p>\n<p translation-result=\"\">然后，使用 <code>Cmd+r</code>（Mac） 或 <code>Ctrl+r</code>（PC） 重新加载页面。</p>\n<h2 translation-origin=\"off\" id=\"forroot-and-forchild\"><code>forRoot()</code> and <code>forChild()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#forroot-and-forchild\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"codeforrootcode-and-codeforchildcode\"><code>forRoot()</code> 与 <code>forChild()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#codeforrootcode-and-codeforchildcode\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">You might have noticed that the CLI adds <code>RouterModule.forRoot(routes)</code> to the <code>app-routing.module.ts</code> <code>imports</code> array. This lets Angular know that this module,\n<code>AppRoutingModule</code>, is a routing module and <code>forRoot()</code> specifies that this is the root\nrouting module. It configures all the\nroutes you pass to it, gives you access to the router directives, and registers the <code>RouterService</code>.\nUse <code>forRoot()</code> in the <code>AppRoutingModule</code>—that is, one time in the app at the root level.</p>\n<p translation-result=\"\">你可能已经注意到了，CLI 会把 <code>RouterModule.forRoot(routes)</code> 添加到 <code>app-routing.module.ts</code> 的 <code>imports</code> 数组中。\n这会让 Angular 知道 <code>AppRoutingModule</code> 是一个路由模块，而 <code>forRoot()</code> 表示这是一个根路由模块。\n它会配置你传入的所有路由、让你能访问路由器指令并注册 <code>RouterService</code>。\n在 <code>AppRoutingModule</code> 中使用 <code>forRoot()</code>，在本应用中这只会在顶层模块中写一次。</p>\n<p translation-origin=\"off\">The CLI also adds <code>RouterModule.forChild(routes)</code> to feature routing modules. This way, Angular\nknows that the route list is only responsible for providing additional routes and is intended for feature modules. You can use <code>forChild()</code> in multiple modules.</p>\n<p translation-result=\"\">CLI 还会把 <code>RouterModule.forChild(routes)</code> 添加到各个特性模块中。这种方式下 Angular 就会知道这个路由列表只负责提供额外的路由并且其设计意图是作为特性模块使用。你可以在多个模块中使用 <code>forChild()</code>。</p>\n<p translation-origin=\"off\"><code>forRoot()</code> contains injector configuration which is global; such as configuring the Router. <code>forChild()</code> has no injector configuration, only directives such as <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> and <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>.</p>\n<p translation-result=\"\"><code>forRoot()</code> 包含的注入器配置是全局性的，比如对路由器的配置。<code>forChild()</code> 中没有注入器配置，只有像 <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 这样的指令。</p>\n<hr>\n<h2 translation-origin=\"off\" id=\"more-on-ngmodules-and-routing\">More on NgModules and routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"more-on-ngmodules-and-routing\">更多关于 NgModule 和路由的知识<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">You may also be interested in the following:</p>\n<p translation-result=\"\">你可能还对下列内容感兴趣：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/router\">Routing and Navigation</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/router\">路由与导航</a>。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/providers\">Providers</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/providers\">服务提供商</a>。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/module-types\">Types of Feature Modules</a>.</p>\n<p translation-result=\"\"> <a href=\"guide/module-types\">特性模块的分类</a>。</p>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/dependency-injection\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/providers\n - guide/sharing-ngmodules\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/NgModule\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/feature-modules\n - guide/frequent-ngmodules\n - guide/lazy-loading-ngmodules#add-a-component-to-the-feature-module\n - guide/lazy-loading-ngmodules#add-another-feature-module\n - guide/lazy-loading-ngmodules#codeforrootcode-and-codeforchildcode\n - guide/lazy-loading-ngmodules#config-routes\n - guide/lazy-loading-ngmodules#configure-the-feature-modules-routes\n - guide/lazy-loading-ngmodules#configure-the-routes\n - guide/lazy-loading-ngmodules#confirm-its-working\n - guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\n - guide/lazy-loading-ngmodules#forroot-and-forchild\n - guide/lazy-loading-ngmodules#high-level-view\n - guide/lazy-loading-ngmodules#inside-the-feature-module\n - guide/lazy-loading-ngmodules#lazy-loading-feature-modules\n - guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\n - guide/lazy-loading-ngmodules#prerequisites\n - guide/lazy-loading-ngmodules#prerequisites-4\n - guide/lazy-loading-ngmodules#routes-at-the-app-level\n - guide/lazy-loading-ngmodules#set-up-an-app\n - guide/lazy-loading-ngmodules#set-up-the-ui\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - guide/router\n-->"
}