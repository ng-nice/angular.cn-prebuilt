{
  "id": "tutorial/toh-pt4",
  "title": "服务",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"services\">Services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#services\"><i class=\"material-icons\">link</i></a></h1>\n<h1 translation-result=\"\" id=\"services-1\">服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#services-1\"><i class=\"material-icons\">link</i></a></h1>\n<p translation-origin=\"off\">The Tour of Heroes <code>HeroesComponent</code> is currently getting and displaying fake data.</p>\n<p translation-result=\"\">英雄指南的 <code>HeroesComponent</code> 目前获取和显示的都是模拟数据。</p>\n<p translation-origin=\"off\">After the refactoring in this tutorial, <code>HeroesComponent</code> will be lean and focused on supporting the view.\nIt will also be easier to unit-test with a mock service.</p>\n<p translation-result=\"\">本节课的重构完成之后，<code>HeroesComponent</code> 变得更精简，并且聚焦于为它的视图提供支持。这也让它更容易使用模拟服务进行单元测试。</p>\n<h2 translation-origin=\"off\" id=\"why-services\">Why services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#why-services\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"why-services\">为什么需要服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#why-services\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data.\nThey should focus on presenting data and delegate data access to a service.</p>\n<p translation-result=\"\">组件不应该直接获取或保存数据，它们不应该了解是否在展示假数据。\n它们应该聚焦于展示数据，而把数据访问的职责委托给某个服务。</p>\n<p translation-origin=\"off\">In this tutorial, you'll create a <code>HeroService</code> that all application classes can use to get heroes.\nInstead of creating that service with <code>new</code>,\nyou'll rely on Angular <a href=\"guide/dependency-injection\"><em>dependency injection</em></a>\nto inject it into the <code>HeroesComponent</code> constructor.</p>\n<p translation-result=\"\">本节课，你将创建一个 <code>HeroService</code>，应用中的所有类都可以使用它来获取英雄列表。\n不要使用 <code>new</code> 来创建此服务，而要依靠 Angular 的<a href=\"guide/dependency-injection\"><em>依赖注入</em></a>机制把它注入到 <code>HeroesComponent</code> 的构造函数中。</p>\n<p translation-origin=\"off\">Services are a great way to share information among classes that <em>don't know each other</em>.\nYou'll create a <code>MessageService</code> and inject it in two places:</p>\n<p translation-result=\"\">服务是在多个“互相不知道”的类之间共享信息的好办法。\n你将创建一个 <code>MessageService</code>，并且把它注入到两个地方：</p>\n<ol>\n<li>\n<p translation-origin=\"off\">in <code>HeroService</code> which uses the service to send a message.</p>\n<p translation-result=\"\"><code>HeroService</code> 中，它会使用该服务发送消息。</p>\n</li>\n<li>\n<p translation-origin=\"off\">in <code>MessagesComponent</code> which displays that message.</p>\n<p translation-result=\"\"><code>MessagesComponent</code> 中，它会显示其中的消息。</p>\n</li>\n</ol>\n<h2 translation-origin=\"off\" id=\"create-the-heroservice\">Create the <em>HeroService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"create-the-emheroserviceem\">创建 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-the-emheroserviceem\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Using the Angular CLI, create a service called <code>hero</code>.</p>\n<p translation-result=\"\">使用 Angular CLI 创建一个名叫 <code>hero</code> 的服务。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate service hero\n</code-example>\n<p translation-origin=\"off\">The command generates skeleton <code>HeroService</code> class in <code>src/app/hero.service.ts</code>\nThe <code>HeroService</code> class should look like the following example.</p>\n<p translation-result=\"\">该命令会在 <code>src/app/hero.service.ts</code> 中生成 <code>HeroService</code> 类的骨架。\n<code>HeroService</code> 类的代码如下：</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"new\" title=\"src/app/hero.service.ts (new service)\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor() { }\n\n}\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"injectable-services\"><em>@Injectable()</em> services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#injectable-services\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"eminjectableem-services\"><em>@Injectable()</em> 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#eminjectableem-services\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Notice that the new service imports the Angular <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> symbol and annotates\nthe class with the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator. This marks the class as one that participates in the <em>dependency injection system</em>. The <code>HeroService</code> class is going to provide an injectable service, and it can also have its own injected dependencies.\nIt doesn't have any dependencies yet, but <a href=\"tutorial/toh-pt4#inject-message-service\">it will soon</a>.</p>\n<p translation-result=\"\">注意，这个新的服务导入了 Angular 的 <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 符号，并且给这个服务类添加了 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器。\n它把这个类标记为<em>依赖注入系统</em>的参与者之一。<code>HeroService</code> 类将会提供一个可注入的服务，并且它还可以拥有自己的待注入的依赖。\n目前它还没有依赖，但是<a href=\"tutorial/toh-pt4#inject-message-service\">很快就会有了</a>。</p>\n<p translation-origin=\"off\">The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator accepts a metadata object for the service, the same way the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator did for your component classes. </p>\n<p translation-result=\"\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器会接受该服务的元数据对象，就像 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 对组件类的作用一样。</p>\n<h3 translation-origin=\"off\" id=\"get-hero-data\">Get hero data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#get-hero-data\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"get-hero-data\">获取英雄数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#get-hero-data\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The <code>HeroService</code> could get hero data from anywhere—a web service, local storage, or a mock data source. </p>\n<p translation-result=\"\"><code>HeroService</code> 可以从任何地方获取数据：Web 服务、本地存储（LocalStorage）或一个模拟的数据源。</p>\n<p translation-origin=\"off\">Removing data access from components means you can change your mind about the implementation anytime, without touching any components.\nThey don't know how the service works.</p>\n<p translation-result=\"\">从组件中移除数据访问逻辑，意味着将来任何时候你都可以改变目前的实现方式，而不用改动任何组件。\n这些组件不需要了解该服务的内部实现。</p>\n<p translation-origin=\"off\">The implementation in <em>this</em> tutorial will continue to deliver <em>mock heroes</em>.</p>\n<p translation-result=\"\">这节课中的实现仍然会提供<em>模拟的英雄列表</em>。</p>\n<p translation-origin=\"off\">Import the <code>Hero</code> and <code>HEROES</code>.</p>\n<p translation-result=\"\">导入 <code>Hero</code> 和 <code>HEROES</code>。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-heroes\">\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n</code-example>\n<p translation-origin=\"off\">Add a <code>getHeroes</code> method to return the <em>mock heroes</em>.</p>\n<p translation-result=\"\">添加一个 <code>getHeroes</code> 方法，让它返回<em>模拟的英雄列表</em>。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"getHeroes\">\ngetHeroes(): Hero[] {\n  return HEROES;\n}\n\n</code-example>\n<a id=\"provide\"></a>\n<h2 translation-origin=\"off\" id=\"provide-the-heroservice\">Provide the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#provide-the-heroservice\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"provide-the-codeheroservicecode\">提供（provide） <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#provide-the-codeheroservicecode\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">You must make the <code>HeroService</code> available to the dependency injection system\nbefore Angular can <em>inject</em> it into the <code>HeroesComponent</code>,\nas you will do <a href=\"tutorial/toh-pt4#inject\">below</a>. You do this by registering a <em>provider</em>. A provider is something that can create or deliver a service; in this case, it instantiates the <code>HeroService</code> class to provide the service.</p>\n<p translation-result=\"\">在要求 Angular 把 <code>HeroService</code> 注入到 <code>HeroesComponent</code> 之前，你必须先把这个服务<em>提供给依赖注入系统</em>。<a href=\"tutorial/toh-pt4#inject\">稍后</a>你就要这么做。\n你可以通过注册<em>提供商</em>来做到这一点。提供商用来创建和交付服务，在这个例子中，它会对 <code>HeroService</code> 类进行实例化，以提供该服务。</p>\n<p translation-origin=\"off\">Now, you need to make sure that the <code>HeroService</code> is registered as the provider of this service.\nYou are registering it with an <em>injector</em>, which is the object that is responsible for choosing and injecting the provider where it is required. </p>\n<p translation-result=\"\">现在，你需要确保 <code>HeroService</code> 已经作为该服务的提供商进行过注册。\n你要用一个<em>注入器</em>注册它。注入器就是一个对象，负责在需要时选取和注入该提供商。</p>\n<p translation-origin=\"off\">By default, the Angular CLI command <code>ng generate service</code> registers a provider with the <em>root injector</em> for your service by including provider metadata in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> decorator. </p>\n<p translation-result=\"\">默认情况下，Angular CLI 命令 <code>ng generate service</code> 会通过给 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 装饰器添加元数据的形式，为该服务把提供商注册到<em>根注入器</em>上。</p>\n<p translation-origin=\"off\">If you look at the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> statement right before the <code>HeroService</code> class definition, you can see that the <code>providedIn</code> metadata value is 'root':    </p>\n<p translation-result=\"\">如果你看看 <code>HeroService</code> 紧前面的 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 语句定义，就会发现 <code>providedIn</code> 元数据的值是 'root'：</p>\n<code-example>\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\n</code-example>\n<p translation-origin=\"off\">When you provide the service at the root level, Angular creates a single, shared instance of <code>HeroService</code> and injects into any class that asks for it.\nRegistering the provider in the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> metadata also allows Angular to optimize an app by removing the service if it turns out not to be used after all. </p>\n<p translation-result=\"\">当你在顶层提供该服务时，Angular 就会为 <code>HeroService</code> 创建一个单一的、共享的实例，并把它注入到任何想要它的类上。\n在 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 元数据中注册该提供商，还能让 Angular 可以通过移除那些完全没有用过的服务，来进行优化。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">If you need to, you can register providers at different levels:\nin the <code>HeroesComponent</code>, in the <code>AppComponent</code>, in the <code>AppModule</code>.\nFor instance, you could have told the CLI to provide the service at the module level automatically by appending <code>--module=app</code>.</p>\n<p translation-result=\"\">如果需要，你也可以在不同的层次上注册提供商 —— 在 <code>HeroesComponent</code> 中、在 <code>AppComponent</code> 中，或在 <code>AppModule</code> 中。\n比如，你可以通过附加 <code>--module=app</code> 参数来告诉 CLI 要自动在模块级提供该服务。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate service hero --module=app\n</code-example>\n<p translation-origin=\"off\">To learn more about providers and injectors, see the <a href=\"guide/dependency-injection\">Dependency Injection guide</a>.</p>\n<p translation-result=\"\">要了解更多，参见<a href=\"guide/dependency-injection\">依赖注入指南</a>。</p>\n</div>\n<p translation-origin=\"off\">The <code>HeroService</code> is now ready to plug into the <code>HeroesComponent</code>.</p>\n<p translation-result=\"\">现在 <code>HeroService</code> 已经准备好插入到 <code>HeroesComponent</code> 中了。</p>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\">This is a interim code sample that will allow you to provide and use the <code>HeroService</code>.  At this point, the code will differ from the <code>HeroService</code> in the <a href=\"tutorial/toh-pt4#final-code-review\">\"final code review\"</a>.</p>\n<p translation-result=\"\">这是一个过渡性的代码范例，它将会允许你提供并使用 <code>HeroService</code>。此刻的代码和<a href=\"tutorial/toh-pt4#final-code-review\">最终代码</a>相差很大。</p>\n</div>\n<h2 translation-origin=\"off\" id=\"update-heroescomponent\">Update <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#update-heroescomponent\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"update-codeheroescomponentcode\">修改 <code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#update-codeheroescomponentcode\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Open the <code>HeroesComponent</code> class file.</p>\n<p translation-result=\"\">打开 <code>HeroesComponent</code> 类文件。</p>\n<p translation-origin=\"off\">Delete the <code>HEROES</code> import, because you won't need that anymore.\nImport the <code>HeroService</code> instead.</p>\n<p translation-result=\"\">删除 <code>HEROES</code> 的导入语句，因为你以后不会再用它了。\n转而导入 <code>HeroService</code>。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.ts\" title=\"src/app/heroes/heroes.component.ts (import HeroService)\" region=\"hero-service-import\">\nimport { HeroService } from '../hero.service';\n\n</code-example>\n<p translation-origin=\"off\">Replace the definition of the <code>heroes</code> property with a simple declaration.</p>\n<p translation-result=\"\">把 <code>heroes</code> 属性的定义改为一句简单的声明。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"heroes\">\nheroes: Hero[];\n\n</code-example>\n<a id=\"inject\"></a>\n<h3 translation-origin=\"off\" id=\"inject-the-heroservice\">Inject the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#inject-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"inject-the-codeheroservicecode\">注入 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#inject-the-codeheroservicecode\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Add a private <code>heroService</code> parameter of type <code>HeroService</code> to the constructor.</p>\n<p translation-result=\"\">往构造函数中添加一个私有的 <code>heroService</code>，其类型为 <code>HeroService</code>。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"ctor\">\nconstructor(private heroService: HeroService) { }\n\n</code-example>\n<p translation-origin=\"off\">The parameter simultaneously defines a private <code>heroService</code> property and identifies it as a <code>HeroService</code> injection site.</p>\n<p translation-result=\"\">这个参数同时做了两件事：1. 声明了一个私有 <code>heroService</code> 属性，2. 把它标记为一个 <code>HeroService</code> 的注入点。</p>\n<p translation-origin=\"off\">When Angular creates a <code>HeroesComponent</code>, the <a href=\"guide/dependency-injection\">Dependency Injection</a> system\nsets the <code>heroService</code> parameter to the singleton instance of <code>HeroService</code>. </p>\n<p translation-result=\"\">当 Angular 创建 <code>HeroesComponent</code> 时，<a href=\"guide/dependency-injection\">依赖注入</a>系统就会把这个 <code>heroService</code> 参数设置为 <code>HeroService</code> 的单例对象。</p>\n<h3 translation-origin=\"off\" id=\"add-getheroes\">Add <em>getHeroes()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#add-getheroes\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"add-emgetheroesem\">添加 <em>getHeroes()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#add-emgetheroesem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Create a function to retrieve the heroes from the service.</p>\n<p translation-result=\"\">创建一个函数，以从服务中获取这些英雄数据。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<a id=\"oninit\"></a>\n<h3 translation-origin=\"off\" id=\"call-it-in-ngoninit\">Call it in <code>ngOnInit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#call-it-in-ngoninit\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"call-it-in-codengoninitcode\">在 <code>ngOnInit</code> 中调用它<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#call-it-in-codengoninitcode\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">While you could call <code>getHeroes()</code> in the constructor, that's not the best practice.</p>\n<p translation-result=\"\">你固然可以在构造函数中调用 <code>getHeroes()</code>，但那不是最佳实践。</p>\n<p translation-origin=\"off\">Reserve the constructor for simple initialization such as wiring constructor parameters to properties.\nThe constructor shouldn't <em>do anything</em>.\nIt certainly shouldn't call a function that makes HTTP requests to a remote server as a <em>real</em> data service would.</p>\n<p translation-result=\"\">让构造函数保持简单，只做初始化操作，比如把构造函数的参数赋值给属性。\n构造函数不应该<em>做任何事</em>。\n它肯定不能调用某个函数来向远端服务（比如真实的数据服务）发起 HTTP 请求。</p>\n<p translation-origin=\"off\">Instead, call <code>getHeroes()</code> inside the <a href=\"guide/lifecycle-hooks\"><em>ngOnInit lifecycle hook</em></a> and\nlet Angular call <code>ngOnInit</code> at an appropriate time <em>after</em> constructing a <code>HeroesComponent</code> instance.</p>\n<p translation-result=\"\">你应该改为在 <a href=\"guide/lifecycle-hooks\"><em>ngOnInit 生命周期钩子</em></a>中调用 <code>getHeroes()</code>，并且等 Angular 构造出 <code>HeroesComponent</code> 的实例之后，找个恰当的时机调用 <code>ngOnInit</code>。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"ng-on-init\">\nngOnInit() {\n  this.getHeroes();\n}\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"see-it-run\">See it run<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#see-it-run\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"see-it-run\">查看运行效果<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#see-it-run\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">After the browser refreshes, the app should run as before,\nshowing a list of heroes and a hero detail view when you click on a hero name.</p>\n<p translation-result=\"\">刷新浏览器，该应用仍运行的一如既往。\n显示英雄列表，并且当你点击某个英雄的名字时显示出英雄详情视图。</p>\n<h2 translation-origin=\"off\" id=\"observable-data\">Observable data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#observable-data\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"observable-data\">可观察（Observable）的数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#observable-data\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">The <code>HeroService.getHeroes()</code> method has a <em>synchronous signature</em>,\nwhich implies that the <code>HeroService</code> can fetch heroes synchronously.\nThe <code>HeroesComponent</code> consumes the <code>getHeroes()</code> result\nas if heroes could be fetched synchronously.</p>\n<p translation-result=\"\"><code>HeroService.getHeroes()</code> 的函数签名是<em>同步的</em>，它所隐含的假设是 <code>HeroService</code> 总是能同步获取英雄列表数据。\n而 <code>HeroesComponent</code> 也同样假设能同步取到 <code>getHeroes()</code> 的结果。</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"get-heroes\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p translation-origin=\"off\">This will not work in a real app.\nYou're getting away with it now because the service currently returns <em>mock heroes</em>.\nBut soon the app will fetch heroes from a remote server,\nwhich is an inherently <em>asynchronous</em> operation.</p>\n<p translation-result=\"\">这在真实的应用中几乎是不可能的。\n现在能这么做，只是因为目前该服务返回的是<em>模拟数据</em>。\n不过很快，该应用就要从远端服务器获取英雄数据了，而那天生就是<em>异步</em>操作。</p>\n<p translation-origin=\"off\">The <code>HeroService</code> must wait for the server to respond,\n<code>getHeroes()</code> cannot return immediately with hero data,\nand the browser will not block while the service waits.</p>\n<p translation-result=\"\"><code>HeroService</code> 必须等服务器给出相应，\n而 <code>getHeroes()</code> 不能立即返回英雄数据，\n浏览器也不会在该服务等待期间停止响应。</p>\n<p translation-origin=\"off\"><code>HeroService.getHeroes()</code> must have an <em>asynchronous signature</em> of some kind.</p>\n<p translation-result=\"\"><code>HeroService.getHeroes()</code> 必须具有某种形式的<em>异步函数签名</em>。</p>\n<p translation-origin=\"off\">It can take a callback. It could return a <code>Promise</code>. It could return an <code>Observable</code>.</p>\n<p translation-result=\"\">它可以使用回调函数，可以返回 <code>Promise</code>（承诺），也可以返回 <code>Observable</code>（可观察对象）。</p>\n<p translation-origin=\"off\">In this tutorial, <code>HeroService.getHeroes()</code> will return an <code>Observable</code>\nin part because it will eventually use the Angular <code>HttpClient.get</code> method to fetch the heroes\nand <a href=\"guide/http\"><code>HttpClient.get()</code> returns an <code>Observable</code></a>.</p>\n<p translation-result=\"\">这节课，<code>HeroService.getHeroes()</code> 将会返回 <code>Observable</code>，因为它最终会使用 Angular 的 <code>HttpClient.get</code> 方法来获取英雄数据，而 <a href=\"guide/http\"><code>HttpClient.get()</code> 会返回 <code>Observable</code></a>。</p>\n<h3 translation-origin=\"off\" id=\"observable-heroservice\">Observable <em>HeroService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#observable-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"observable-emheroserviceem\">可观察对象版本的 <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#observable-emheroserviceem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\"><code>Observable</code> is one of the key classes in the <a href=\"http://reactivex.io/rxjs/\">RxJS library</a>.</p>\n<p translation-result=\"\"><code>Observable</code> 是 <a href=\"http://reactivex.io/rxjs/\">RxJS 库</a>中的一个关键类。</p>\n<p translation-origin=\"off\">In a <a href=\"tutorial/toh-pt6\">later tutorial on HTTP</a>, you'll learn that Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return RxJS <code>Observable</code>s.\nIn this tutorial, you'll simulate getting data from the server with the RxJS <code>of()</code> function.</p>\n<p translation-result=\"\">在<a href=\"tutorial/toh-pt6\">稍后的 HTTP 教程</a>中，你就会知道 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的方法会返回 RxJS 的 <code>Observable</code>。\n这节课，你将使用 RxJS 的 <code>of()</code> 函数来模拟从服务器返回数据。</p>\n<p translation-origin=\"off\">Open the <code>HeroService</code> file and import the <code>Observable</code> and <code>of</code> symbols from RxJS.</p>\n<p translation-result=\"\">打开 <code>HeroService</code> 文件，并从 RxJS 中导入 <code>Observable</code> 和 <code>of</code> 符号。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" title=\"src/app/hero.service.ts (Observable imports)\" region=\"import-observable\">\nimport { Observable, of } from 'rxjs';\n\n</code-example>\n<p translation-origin=\"off\">Replace the <code>getHeroes</code> method with this one.</p>\n<p translation-result=\"\">把 <code>getHeroes</code> 方法改成这样：</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return of(HEROES);\n}\n\n</code-example>\n<p translation-origin=\"off\"><code>of(HEROES)</code> returns an <code>Observable&#x3C;Hero[]></code> that emits  <em>a single value</em>, the array of mock heroes.</p>\n<p translation-result=\"\"><code>of(HEROES)</code> 会返回一个  <code>Observable&#x3C;Hero[]></code>，它会发出单个值，这个值就是这些模拟英雄的数组。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">In the <a href=\"tutorial/toh-pt6\">HTTP tutorial</a>, you'll call <code>HttpClient.get&#x3C;Hero[]>()</code> which also returns an <code>Observable&#x3C;Hero[]></code> that emits  <em>a single value</em>, an array of heroes from the body of the HTTP response.</p>\n<p translation-result=\"\">在 <a href=\"tutorial/toh-pt6\">HTTP 教程</a>中，你将会调用 <code>HttpClient.get&#x3C;Hero[]>()</code> 它也同样返回一个 <code>Observable&#x3C;Hero[]></code>，它也会发出单个值，这个值就是来自 HTTP 响应体中的英雄数组。</p>\n</div>\n<h3 translation-origin=\"off\" id=\"subscribe-in-heroescomponent\">Subscribe in <em>HeroesComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#subscribe-in-heroescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"subscribe-in-emheroescomponentem\">在 <code>HeroesComponent</code> 中订阅<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#subscribe-in-emheroescomponentem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The <code>HeroService.getHeroes</code> method used to return a <code>Hero[]</code>.\nNow it returns an <code>Observable&#x3C;Hero[]></code>.</p>\n<p translation-result=\"\"><code>HeroService.getHeroes</code> 方法用于返回一个 <code>Hero[]</code>，\n目前它返回的是 <code>Observable&#x3C;Hero[]></code>。</p>\n<p translation-origin=\"off\">You'll have to adjust to that difference in <code>HeroesComponent</code>.</p>\n<p translation-result=\"\">你必须在 <code>HeroesComponent</code> 中也向本服务中的这种形式看齐。</p>\n<p translation-origin=\"off\">Find the <code>getHeroes</code> method and replace it with the following code\n(shown side-by-side with the previous version for comparison)</p>\n<p translation-result=\"\">找到 <code>getHeroes</code> 方法，并且把它替换为如下代码（和前一个版本对比显示）：</p>\n<code-tabs>\n\n  <code-pane title=\"heroes.component.ts (Observable)\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes);\n}\n\n</code-pane>\n\n  <code-pane title=\"heroes.component.ts (Original)\" path=\"toh-pt4/src/app/heroes/heroes.component.1.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-pane>\n\n</code-tabs>\n<p translation-origin=\"off\"><code>Observable.subscribe()</code> is the critical difference.</p>\n<p translation-result=\"\"><code>Observable.subscribe()</code> 是关键的差异点。</p>\n<p translation-origin=\"off\">The previous version assigns an array of heroes to the component's <code>heroes</code> property.\nThe assignment occurs <em>synchronously</em>, as if the server could return heroes instantly\nor the browser could freeze the UI while it waited for the server's response.</p>\n<p translation-result=\"\">上一个版本把英雄的数组赋值给了该组件的 <code>heroes</code> 属性。\n这种赋值是<em>同步</em>的，这里包含的假设是服务器能立即返回英雄数组或者浏览器能在等待服务器响应时冻结界面。</p>\n<p translation-origin=\"off\">That <em>won't work</em> when the <code>HeroService</code> is actually making requests of a remote server.</p>\n<p translation-result=\"\">当 <code>HeroService</code> 真的向远端服务器发起请求时，这种方式就行不通了。</p>\n<p translation-origin=\"off\">The new version waits for the <code>Observable</code> to emit the array of heroes—\nwhich could happen now or several minutes from now.\nThen <code>subscribe</code> passes the emitted array to the callback,\nwhich sets the component's <code>heroes</code> property.</p>\n<p translation-result=\"\">新的版本等待 <code>Observable</code> 发出这个英雄数组，这可能立即发生，也可能会在几分钟之后。\n然后，<code>subscribe</code> 函数把这个英雄数组传给这个回调函数，该函数把英雄数组赋值给组件的 <code>heroes</code> 属性。</p>\n<p translation-origin=\"off\">This asynchronous approach <em>will work</em> when\nthe <code>HeroService</code> requests heroes from the server.</p>\n<p translation-result=\"\">使用这种异步方式，当 <code>HeroService</code> 从远端服务器获取英雄数据时，就<em>可以工作了</em>。</p>\n<h2 translation-origin=\"off\" id=\"show-messages\">Show messages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#show-messages\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"show-messages\">显示消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#show-messages\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">In this section you will </p>\n<p translation-result=\"\">在这一节，你将</p>\n<ul>\n<li>\n<p translation-origin=\"off\">add a <code>MessagesComponent</code> that displays app messages at the bottom of the screen.</p>\n<p translation-result=\"\"> 添加一个 <code>MessagesComponent</code>，它在屏幕的底部显示应用中的消息。</p>\n</li>\n<li>\n<p translation-origin=\"off\">create an injectable, app-wide <code>MessageService</code> for sending messages to be displayed</p>\n<p translation-result=\"\"> 创建一个可注入的、全应用级别的 <code>MessageService</code>，用于发送要显示的消息。</p>\n</li>\n<li>\n<p translation-origin=\"off\">inject <code>MessageService</code> into the <code>HeroService</code></p>\n<p translation-result=\"\"> 把 <code>MessageService</code> 注入到 <code>HeroService</code> 中。</p>\n</li>\n<li>\n<p translation-origin=\"off\">display a message when <code>HeroService</code> fetches heroes successfully.</p>\n<p translation-result=\"\"> 当 <code>HeroService</code> 成功获取了英雄数据时显示一条消息。</p>\n</li>\n</ul>\n<h3 translation-origin=\"off\" id=\"create-messagescomponent\">Create <em>MessagesComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-messagescomponent\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"create-emmessagescomponentem\">创建 <code>MessagesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-emmessagescomponentem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Use the CLI to create the <code>MessagesComponent</code>.</p>\n<p translation-result=\"\">使用 CLI 创建 <code>MessagesComponent</code>。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component messages\n</code-example>\n<p translation-origin=\"off\">The CLI creates the component files in the <code>src/app/messages</code> folder and declare <code>MessagesComponent</code> in <code>AppModule</code>.</p>\n<p translation-result=\"\">CLI 在 <code>src/app/messages</code> 中创建了组件文件，并且把 <code>MessagesComponent</code> 声明在了 <code>AppModule</code> 中。</p>\n<p translation-origin=\"off\">Modify the <code>AppComponent</code> template to display the generated <code>MessagesComponent</code></p>\n<p translation-result=\"\">修改 <code>AppComponent</code> 的模板来显示所生成的 <code>MessagesComponent</code>：</p>\n<code-example title=\"/src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n\n</code-example>\n<p translation-origin=\"off\">You should see the default paragraph from <code>MessagesComponent</code> at the bottom of the page.</p>\n<p translation-result=\"\">你可以在页面的底部看到来自的 <code>MessagesComponent</code> 的默认内容。</p>\n<h3 translation-origin=\"off\" id=\"create-the-messageservice\">Create the <em>MessageService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"create-the-emmessageserviceem\">创建 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-the-emmessageserviceem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Use the CLI to create the <code>MessageService</code> in <code>src/app</code>. </p>\n<p translation-result=\"\">使用 CLI 在 <code>src/app</code> 中创建 <code>MessageService</code>。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate service message\n</code-example>\n<p translation-origin=\"off\">Open <code>MessageService</code> and replace its contents with the following.</p>\n<p translation-result=\"\">打开 <code>MessageService</code>，并把它的内容改成这样：</p>\n<code-example title=\"/src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-example>\n<p translation-origin=\"off\">The service exposes its cache of <code>messages</code> and two methods: one to <code>add()</code> a message to the cache and another to <code>clear()</code> the cache.</p>\n<p translation-result=\"\">该服务对外暴露了它的 <code>messages</code> 缓存，以及两个方法：<code>add()</code> 方法往缓存中添加一条消息，<code>clear()</code> 方法用于清空缓存。</p>\n<a id=\"inject-message-service\"></a>\n<h3 translation-origin=\"off\" id=\"inject-it-into-the-heroservice\">Inject it into the <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#inject-it-into-the-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"inject-it-into-the-codeheroservicecode\">把它注入到 <code>HeroService</code> 中<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#inject-it-into-the-codeheroservicecode\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Re-open the <code>HeroService</code> and import the <code>MessageService</code>.</p>\n<p translation-result=\"\">重新打开 <code>HeroService</code>，并且导入 <code>MessageService</code>。</p>\n<code-example title=\"/src/app/hero.service.ts (import MessageService)\" path=\"toh-pt4/src/app/hero.service.ts\" region=\"import-message-service\">\nimport { MessageService } from './message.service';\n\n</code-example>\n<p translation-origin=\"off\">Modify the constructor with a parameter that declares a private <code>messageService</code> property.\nAngular will inject the singleton <code>MessageService</code> into that property\nwhen it creates the <code>HeroService</code>.</p>\n<p translation-result=\"\">修改这个构造函数，添加一个私有的 <code>messageService</code> 属性参数。\nAngular 将会在创建 <code>HeroService</code> 时把 <code>MessageService</code> 的单例注入到这个属性中。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(private messageService: MessageService) { }\n\n</code-example>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">This is a typical \"<em>service-in-service</em>\" scenario:\nyou inject the <code>MessageService</code> into the <code>HeroService</code> which is injected into the <code>HeroesComponent</code>.</p>\n<p translation-result=\"\">这是一个典型的“服务中的服务”场景：\n你把 <code>MessageService</code> 注入到了 <code>HeroService</code> 中，而 <code>HeroService</code> 又被注入到了 <code>HeroesComponent</code> 中。</p>\n</div>\n<h3 translation-origin=\"off\" id=\"send-a-message-from-heroservice\">Send a message from <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#send-a-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"send-a-message-from-codeheroservicecode\">从 <code>HeroService</code> 中发送一条消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#send-a-message-from-codeheroservicecode\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Modify the <code>getHeroes</code> method to send a message when the heroes are fetched.</p>\n<p translation-result=\"\">修改 <code>getHeroes</code> 方法，在获取到英雄数组时发送一条消息。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  // TODO: send the message _after_ fetching the heroes\n  this.messageService.add('HeroService: fetched heroes');\n  return of(HEROES);\n}\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"display-the-message-from-heroservice\">Display the message from <code>HeroService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#display-the-message-from-heroservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"display-the-message-from-codeheroservicecode\">从 <code>HeroService</code> 中显示消息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#display-the-message-from-codeheroservicecode\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The <code>MessagesComponent</code> should display all messages,\nincluding the message sent by the <code>HeroService</code> when it fetches heroes.</p>\n<p translation-result=\"\"><code>MessagesComponent</code> 可以显示所有消息，\n包括当 <code>HeroService</code> 获取到英雄数据时发送的那条。</p>\n<p translation-origin=\"off\">Open <code>MessagesComponent</code> and import the <code>MessageService</code>.</p>\n<p translation-result=\"\">打开 <code>MessagesComponent</code>，并且导入 <code>MessageService</code>。</p>\n<code-example title=\"/src/app/messages/messages.component.ts (import MessageService)\" path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"import-message-service\">\nimport { MessageService } from '../message.service';\n\n</code-example>\n<p translation-origin=\"off\">Modify the constructor with a parameter that declares a <strong>public</strong> <code>messageService</code> property.\nAngular will inject the singleton <code>MessageService</code> into that property\nwhen it creates the <code>MessagesComponent</code>.</p>\n<p translation-result=\"\">修改构造函数，添加一个 <strong>public</strong> 的 <code>messageService</code> 属性。\nAngular 将会在创建 <code>MessagesComponent</code> 的实例时 把 <code>MessageService</code> 的实例注入到这个属性中。</p>\n<code-example path=\"toh-pt4/src/app/messages/messages.component.ts\" region=\"ctor\">\nconstructor(public messageService: MessageService) {}\n\n</code-example>\n<p translation-origin=\"off\">The <code>messageService</code> property <strong>must be public</strong> because you're about to bind to it in the template.</p>\n<p translation-result=\"\">这个 <code>messageService</code> 属性必须是公共属性，因为你将会在模板中绑定到它。</p>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\">Angular only binds to <em>public</em> component properties.</p>\n<p translation-result=\"\">Angular 只会绑定到组件的<em>公共</em>属性。</p>\n</div>\n<h3 translation-origin=\"off\" id=\"bind-to-the-messageservice\">Bind to the <em>MessageService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#bind-to-the-messageservice\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"bind-to-the-emmessageserviceem\">绑定到 <code>MessageService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#bind-to-the-emmessageserviceem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Replace the CLI-generated <code>MessagesComponent</code> template with the following.</p>\n<p translation-result=\"\">把 CLI 生成的 <code>MessagesComponent</code> 的模板改成这样：</p>\n<code-example title=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\">\n\n  &#x3C;h2>Messages&#x3C;/h2>\n  &#x3C;button class=\"clear\"\n          (click)=\"messageService.clear()\">clear&#x3C;/button>\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'> {{message}} &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-example>\n<p translation-origin=\"off\">This template binds directly to the component's <code>messageService</code>.</p>\n<p translation-result=\"\">这个模板直接绑定到了组件的 <code>messageService</code> 属性上。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">The <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> only displays the messages area if there are messages to show.</p>\n<p translation-result=\"\"> <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 只有当在有消息时才会显示消息区。</p>\n</li>\n<li>\n<p translation-origin=\"off\">An <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> presents the list of messages in repeated <code>&#x3C;div></code> elements.</p>\n<p translation-result=\"\"> <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 用来在一系列 <code>&#x3C;div></code> 元素中展示消息列表。</p>\n</li>\n<li>\n<p translation-origin=\"off\">An Angular <a href=\"guide/template-syntax#event-binding\">event binding</a> binds the button's click event\nto <code>MessageService.clear()</code>.</p>\n<p translation-result=\"\">   Angular 的<a href=\"guide/template-syntax#event-binding\">事件绑定</a>把按钮的 <code>click</code> 事件绑定到了 <code>MessageService.clear()</code>。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">The messages will look better when you add the private CSS styles to <code>messages.component.css</code>\nas listed in one of the <a href=\"tutorial/toh-pt4#final-code-review\">\"final code review\"</a> tabs below.</p>\n<p translation-result=\"\">当你把 <a href=\"tutorial/toh-pt4#final-code-review\">最终代码</a> 某一页的内容添加到 <code>messages.component.css</code> 中时，这些消息会变得好看一些。</p>\n<p translation-origin=\"off\">The browser refreshes and the page displays the list of heroes.\nScroll to the bottom to see the message from the <code>HeroService</code> in the message area.\nClick the \"clear\" button and the message area disappears.</p>\n<p translation-result=\"\">刷新浏览器，页面显示出了英雄列表。\n滚动到底部，就会在消息区看到来自 <code>HeroService</code> 的消息。\n点击“清空”按钮，消息区不见了。</p>\n<a id=\"final-code-review\"></a>\n<h2 translation-origin=\"off\" id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"final-code-review-4\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#final-code-review-4\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Here are the code files discussed on this page and your app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">你的应用应该变成了这样 <live-example></live-example>。本页所提及的代码文件如下：</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&#x3C;Hero[]> {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/message.service.ts\" path=\"toh-pt4/src/app/message.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt4/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  selectedHero: Hero;\n\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes => this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/messages/messages.component.ts\" path=\"toh-pt4/src/app/messages/messages.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor(public messageService: MessageService) {}\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/messages/messages.component.html\" path=\"toh-pt4/src/app/messages/messages.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"messageService.messages.length\">\n\n  &#x3C;h2>Messages&#x3C;/h2>\n  &#x3C;button class=\"clear\"\n          (click)=\"messageService.clear()\">clear&#x3C;/button>\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>='let message of messageService.messages'> {{message}} &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/messages/messages.component.css\" path=\"toh-pt4/src/app/messages/messages.component.css\">\n/* MessagesComponent's private CSS styles */\nh2 {\n  color: red;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\nbody {\n  margin: 2em;\n}\nbody, input[text], button {\n  color: crimson;\n  font-family: Cambria, Georgia;\n}\n\nbutton.clear {\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #aaa;\n  cursor: auto;\n}\nbutton.clear {\n  color: #888;\n  margin-bottom: 12px;\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"toh-pt4/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\nimport { MessagesComponent } from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [\n    // no need to place any providers due to the `providedIn` flag...\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.html\" path=\"toh-pt4/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n\n</code-pane>\n\n</code-tabs>\n<h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#summary\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"summary-14\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#summary-14\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p translation-origin=\"off\">You refactored data access to the <code>HeroService</code> class.</p>\n<p translation-result=\"\"> 你把数据访问逻辑重构到了 <code>HeroService</code> 类中。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You registered the <code>HeroService</code> as the <em>provider</em> of its service at the root level so that it can be injected anywhere in the app.</p>\n<p translation-result=\"\"> 你在根注入器中把 <code>HeroService</code> 注册为该服务的提供商，以便在别处可以注入它。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You used <a href=\"guide/dependency-injection\">Angular Dependency Injection</a> to inject it into a component.</p>\n<p translation-result=\"\"> 你使用 <a href=\"guide/dependency-injection\">Angular 依赖注入</a>机制把它注入到了组件中。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You gave the <code>HeroService</code> <em>get data</em> method an asynchronous signature.</p>\n<p translation-result=\"\"> 你给 <code>HeroService</code> 中获取数据的方法提供了一个异步的函数签名。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You discovered <code>Observable</code> and the RxJS <em>Observable</em> library.</p>\n<p translation-result=\"\"> 你发现了 <code>Observable</code> 以及 RxJS 库。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You used RxJS <code>of()</code> to return an observable of mock heroes (<code>Observable&#x3C;Hero[]></code>).</p>\n<p translation-result=\"\"> 你使用 RxJS 的 <code>of()</code> 方法返回了一个模拟英雄数据的<em>可观察对象</em> (<code>Observable&#x3C;Hero[]></code>)。</p>\n</li>\n<li>\n<p translation-origin=\"off\">The component's <code>ngOnInit</code> lifecycle hook calls the <code>HeroService</code> method, not the constructor.</p>\n<p translation-result=\"\"> 在组件的 <code>ngOnInit</code> 生命周期钩子中调用 <code>HeroService</code> 方法，而不是构造函数中。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You created a <code>MessageService</code> for loosely-coupled communication between classes.</p>\n<p translation-result=\"\"> 你创建了一个 <code>MessageService</code>，以便在类之间实现松耦合通讯。</p>\n</li>\n<li>\n<p translation-origin=\"off\">The <code>HeroService</code> injected into a component is created with another injected service,\n<code>MessageService</code>.</p>\n<p translation-result=\"\">  <code>HeroService</code> 连同注入到它的服务 <code>MessageService</code> 一起，注入到了组件中。</p>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - guide/lifecycle-hooks\n - guide/reactive-forms\n - guide/router\n - guide/singleton-services\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/http/HttpClient\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - guide/dependency-injection\n - guide/http\n - guide/lifecycle-hooks\n - guide/template-syntax#event-binding\n - tutorial/toh-pt4#add-emgetheroesem\n - tutorial/toh-pt4#add-getheroes\n - tutorial/toh-pt4#bind-to-the-emmessageserviceem\n - tutorial/toh-pt4#bind-to-the-messageservice\n - tutorial/toh-pt4#call-it-in-codengoninitcode\n - tutorial/toh-pt4#call-it-in-ngoninit\n - tutorial/toh-pt4#create-emmessagescomponentem\n - tutorial/toh-pt4#create-messagescomponent\n - tutorial/toh-pt4#create-the-emheroserviceem\n - tutorial/toh-pt4#create-the-emmessageserviceem\n - tutorial/toh-pt4#create-the-heroservice\n - tutorial/toh-pt4#create-the-messageservice\n - tutorial/toh-pt4#display-the-message-from-codeheroservicecode\n - tutorial/toh-pt4#display-the-message-from-heroservice\n - tutorial/toh-pt4#eminjectableem-services\n - tutorial/toh-pt4#final-code-review\n - tutorial/toh-pt4#final-code-review-4\n - tutorial/toh-pt4#get-hero-data\n - tutorial/toh-pt4#inject\n - tutorial/toh-pt4#inject-it-into-the-codeheroservicecode\n - tutorial/toh-pt4#inject-it-into-the-heroservice\n - tutorial/toh-pt4#inject-message-service\n - tutorial/toh-pt4#inject-the-codeheroservicecode\n - tutorial/toh-pt4#inject-the-heroservice\n - tutorial/toh-pt4#injectable-services\n - tutorial/toh-pt4#observable-data\n - tutorial/toh-pt4#observable-emheroserviceem\n - tutorial/toh-pt4#observable-heroservice\n - tutorial/toh-pt4#provide-the-codeheroservicecode\n - tutorial/toh-pt4#provide-the-heroservice\n - tutorial/toh-pt4#see-it-run\n - tutorial/toh-pt4#send-a-message-from-codeheroservicecode\n - tutorial/toh-pt4#send-a-message-from-heroservice\n - tutorial/toh-pt4#services\n - tutorial/toh-pt4#services-1\n - tutorial/toh-pt4#show-messages\n - tutorial/toh-pt4#subscribe-in-emheroescomponentem\n - tutorial/toh-pt4#subscribe-in-heroescomponent\n - tutorial/toh-pt4#summary\n - tutorial/toh-pt4#summary-14\n - tutorial/toh-pt4#update-codeheroescomponentcode\n - tutorial/toh-pt4#update-heroescomponent\n - tutorial/toh-pt4#why-services\n - tutorial/toh-pt6\n - http://reactivex.io/rxjs/\n-->"
}