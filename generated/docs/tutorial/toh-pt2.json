{
  "id": "tutorial/toh-pt2",
  "title": "显示英雄列表",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"display-a-heroes-list\">Display a Heroes List<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#display-a-heroes-list\"><i class=\"material-icons\">link</i></a></h1>\n<h1 translation-result=\"\" id=\"display-a-heroes-list\">显示英雄列表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#display-a-heroes-list\"><i class=\"material-icons\">link</i></a></h1>\n<p translation-origin=\"off\">In this page, you'll expand the Tour of Heroes app to display a list of heroes, and\nallow users to select a hero and display the hero's details.</p>\n<p translation-result=\"\">本页中，你将扩展《英雄指南》应用，让它显示一个英雄列表，\n并允许用户选择一个英雄，查看该英雄的详细信息。</p>\n<h2 translation-origin=\"off\" id=\"create-mock-heroes\">Create mock heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#create-mock-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"create-mock-heroes\">创建模拟（mock）的英雄数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#create-mock-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">You'll need some heroes to display.</p>\n<p translation-result=\"\">你需要一些英雄数据以供显示。</p>\n<p translation-origin=\"off\">Eventually you'll get them from a remote data server.\nFor now, you'll create some <em>mock heroes</em> and pretend they came from the server.</p>\n<p translation-result=\"\">最终，你会从远端的数据服务器获取它。\n不过目前，你要先创建一些<em>模拟的英雄数据</em>，并假装它们是从服务器上取到的。</p>\n<p translation-origin=\"off\">Create a file called <code>mock-heroes.ts</code> in the <code>src/app/</code> folder.\nDefine a <code>HEROES</code> constant as an array of ten heroes and export it.\nThe file should look like this.</p>\n<p translation-result=\"\">在 <code>src/app/</code> 文件夹中创建一个名叫 <code>mock-heroes.ts</code> 的文件。\n定义一个包含十个英雄的常量数组 <code>HEROES</code>，并导出它。\n该文件是这样的。</p>\n<code-example path=\"toh-pt2/src/app/mock-heroes.ts\" linenums=\"false\" title=\"src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"displaying-heroes\">Displaying heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#displaying-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"displaying-heroes\">显示这些英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#displaying-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">You're about to display the list of heroes at the top of the <code>HeroesComponent</code>.</p>\n<p translation-result=\"\">你要在 <code>HeroesComponent</code> 的顶部显示这个英雄列表。</p>\n<p translation-origin=\"off\">Open the <code>HeroesComponent</code> class file and import the mock <code>HEROES</code>.</p>\n<p translation-result=\"\">打开 <code>HeroesComponent</code> 类文件，并导入模拟的 <code>HEROES</code>。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"import-heroes\" title=\"src/app/heroes/heroes.component.ts (import HEROES)\">\nimport { HEROES } from '../mock-heroes';\n\n</code-example>\n<p translation-origin=\"off\">Add a <code>heroes</code> property to the class that exposes these heroes for binding.</p>\n<p translation-result=\"\">往类中添加一个 <code>heroes</code> 属性，这样可以暴露出这些英雄，以供绑定。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"heroes\">\nheroes = HEROES;\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"list-heroes-with-ngfor\">List heroes with <em>*ngFor</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#list-heroes-with-ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"list-heroes-with-emngforem\">使用 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 列出这些英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#list-heroes-with-emngforem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Open the <code>HeroesComponent</code> template file and make the following changes:</p>\n<p translation-result=\"\">打开 <code>HeroesComponent</code> 的模板文件，并做如下修改：</p>\n<ul>\n<li>\n<p translation-origin=\"off\">Add an <code>&#x3C;h2></code> at the top, </p>\n<p translation-result=\"\"> 在顶部添加 <code>&#x3C;h2></code>，</p>\n</li>\n<li>\n<p translation-origin=\"off\">Below it add an HTML unordered list (<code>&#x3C;ul></code>)</p>\n<p translation-result=\"\"> 然后添加表示无序列表的 HTML 元素（<code>&#x3C;ul></code>）</p>\n</li>\n<li>\n<p translation-origin=\"off\">Insert an <code>&#x3C;li></code> within the <code>&#x3C;ul></code> that displays properties of a <code>hero</code>.</p>\n<p translation-result=\"\"> 在 <code>&#x3C;ul></code> 中插入一个 <code>&#x3C;li></code> 元素，以显示单个 <code>hero</code> 的属性。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Sprinkle some CSS classes for styling (you'll add the CSS styles shortly).</p>\n<p translation-result=\"\"> 点缀上一些 CSS 类（稍后你还会添加更多 CSS 样式）。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Make it look like this:</p>\n<p translation-result=\"\">做完之后应该是这样的：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"list\" title=\"heroes.component.html (heroes template)\" linenums=\"false\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li>\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p translation-origin=\"off\">Now change the <code>&#x3C;li></code> to this:</p>\n<p translation-result=\"\">现在，把 <code>&#x3C;li></code> 修改成这样：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"li\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n\n</code-example>\n<p translation-origin=\"off\">The <a href=\"guide/template-syntax#ngFor\"><code>*ngFor</code></a> is Angular's <em>repeater</em> directive.\nIt repeats the host element for each element in a list.</p>\n<p translation-result=\"\"><a href=\"guide/template-syntax#ngFor\"><code>*ngFor</code></a> 是一个 Angular 的复写器（repeater）指令。\n它会为列表中的每项数据复写它的宿主元素。</p>\n<p translation-origin=\"off\">In this example</p>\n<p translation-result=\"\">在这个例子中</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><code>&#x3C;li></code> is the host element</p>\n<p translation-result=\"\"> <code>&#x3C;li></code> 就是 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的宿主元素</p>\n</li>\n<li>\n<p translation-origin=\"off\"><code>heroes</code> is the list from the <code>HeroesComponent</code> class.</p>\n<p translation-result=\"\"> <code>heroes</code> 就是来自 <code>HeroesComponent</code> 类的列表。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><code>hero</code> holds the current hero object for each iteration through the list. </p>\n<p translation-result=\"\"> 当依次遍历这个列表时，<code>hero</code> 会为每个迭代保存当前的英雄对象。</p>\n</li>\n</ul>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\">Don't forget the asterisk (*) in front of <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. It's a critical part of the syntax.</p>\n<p translation-result=\"\">不要忘了 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 前面的星号（<code>*</code>），它是该语法中的关键部分。</p>\n</div>\n<p translation-origin=\"off\">After the browser refreshes, the list of heroes appears.</p>\n<p translation-result=\"\">浏览器刷新之后，英雄列表出现了。</p>\n<a id=\"styles\"></a>\n<h3 translation-origin=\"off\" id=\"style-the-heroes\">Style the heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-heroes\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"style-the-heroes\">给英雄们“美容”<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-heroes\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The heroes list should be attractive and should respond visually when users\nhover over and select a hero from the list.</p>\n<p translation-result=\"\">英雄列表应该富有吸引力，并且当用户把鼠标移到某个英雄上和从列表中选中某个英雄时，应该给出视觉反馈。</p>\n<p translation-origin=\"off\">In the <a href=\"tutorial/toh-pt0#app-wide-styles\">first tutorial</a>, you set the basic styles for the entire application in <code>styles.css</code>.\nThat stylesheet didn't include styles for this list of heroes.</p>\n<p translation-result=\"\">在<a href=\"tutorial/toh-pt0#app-wide-styles\">教程的第一章</a>，你曾在 <code>styles.css</code> 中为整个应用设置了一些基础的样式。\n但那个样式表并不包含英雄列表所需的样式。</p>\n<p translation-origin=\"off\">You could add more styles to <code>styles.css</code> and keep growing that stylesheet as you add components.</p>\n<p translation-result=\"\">固然，你可以把更多样式加入到 <code>styles.css</code>，并且放任它随着你添加更多组件而不断膨胀。</p>\n<p translation-origin=\"off\">You may prefer instead to define private styles for a specific component and keep everything a component needs— the code, the HTML,\nand the CSS —together in one place.</p>\n<p translation-result=\"\">但还有更好的方式。你可以定义属于特定组件的私有样式，并且让组件所需的一切（代码、HTML 和 CSS）都放在一起。</p>\n<p translation-origin=\"off\">This approach makes it easier to re-use the component somewhere else\nand deliver the component's intended appearance even if the global styles are different.</p>\n<p translation-result=\"\">这种方式让你在其它地方复用该组件更加容易，并且即使全局样式和这里不一样，组件也仍然具有期望的外观。</p>\n<p translation-origin=\"off\">You define private styles either inline in the <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> array or\nas stylesheet file(s) identified in the <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> array.</p>\n<p translation-result=\"\">你可以用多种方式定义私有样式，或者内联在 <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> 数组中，或者在 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 所指出的样式表文件中。</p>\n<p translation-origin=\"off\">When the CLI generated the <code>HeroesComponent</code>, it created an empty <code>heroes.component.css</code> stylesheet for the <code>HeroesComponent</code>\nand pointed to it in <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> like this.</p>\n<p translation-result=\"\">当 CLI 生成 <code>HeroesComponent</code> 时，它也同时为 <code>HeroesComponent</code> 创建了空白的 <code>heroes.component.css</code> 样式表文件，并且让 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 指向它，就像这样：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"metadata\" title=\"src/app/heroes/heroes.component.ts (@Component)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\n\n</code-example>\n<p translation-origin=\"off\">Open the <code>heroes.component.css</code> file and paste in the private CSS styles for the <code>HeroesComponent</code>.\nYou'll find them in the <a href=\"tutorial/toh-pt2#final-code-review\">final code review</a> at the bottom of this guide.</p>\n<p translation-result=\"\">打开 <code>heroes.component.css</code> 文件，并且把 <code>HeroesComponent</code> 的私有 CSS 样式粘贴进去。\n你可以在本指南底部的<a href=\"tutorial/toh-pt2#final-code-review\">查看最终代码</a>中找到它们。</p>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\">Styles and stylesheets identified in <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata are scoped to that specific component.\nThe <code>heroes.component.css</code> styles apply only to the <code>HeroesComponent</code> and don't affect the outer HTML or the HTML in any other component.</p>\n<p translation-result=\"\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 元数据中指定的样式和样式表都是局限于该组件的。\n<code>heroes.component.css</code> 中的样式只会作用于 <code>HeroesComponent</code>，既不会影响到组件外的 HTML，也不会影响到其它组件中的 HTML。</p>\n</div>\n<h2 translation-origin=\"off\" id=\"masterdetail\">Master/Detail<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#masterdetail\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"masterdetail\">主从结构<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#masterdetail\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">When the user clicks a hero in the <strong>master</strong> list,\nthe component should display the selected hero's <strong>details</strong> at the bottom of the page.</p>\n<p translation-result=\"\">当用户在<strong>主</strong>列表中点击一个英雄时，该组件应该在页面底部显示所选英雄的<strong>详情</strong>。</p>\n<p translation-origin=\"off\">In this section, you'll listen for the hero item click event\nand update the hero detail.</p>\n<p translation-result=\"\">在本节，你将监听英雄条目的点击事件，并更新英雄的详情。</p>\n<h3 translation-origin=\"off\" id=\"add-a-click-event-binding\">Add a click event binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-click-event-binding\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"add-a-click-event-binding\">添加 <code>click</code> 事件绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-click-event-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Add a click event binding to the <code>&#x3C;li></code> like this:</p>\n<p translation-result=\"\">再往 <code>&#x3C;li></code> 元素上插入一句点击事件的绑定代码：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"selectedHero-click\" title=\"heroes.component.html (template excerpt)\" linenums=\"false\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"onSelect(hero)\">\n\n</code-example>\n<p translation-origin=\"off\">This is an example of Angular's <a href=\"guide/template-syntax#event-binding\">event binding</a> syntax.</p>\n<p translation-result=\"\">这是 Angular <a href=\"guide/template-syntax#event-binding\">事件绑定</a> 语法的例子。</p>\n<p translation-origin=\"off\">The parentheses around <code>click</code> tell Angular to listen for the <code>&#x3C;li></code> element's  <code>click</code> event.\nWhen the user clicks in the <code>&#x3C;li></code>, Angular executes the <code>onSelect(hero)</code> expression.</p>\n<p translation-result=\"\"><code>click</code> 外面的圆括号会让 Angular 监听这个 <code>&#x3C;li></code> 元素的 <code>click</code> 事件。\n当用户点击 <code>&#x3C;li></code> 时，Angular 就会执行表达式 <code>onSelect(hero)</code>。</p>\n<p translation-origin=\"off\"><code>onSelect()</code> is a <code>HeroesComponent</code> method that you're about to write.\nAngular calls it with the <code>hero</code> object displayed in the clicked <code>&#x3C;li></code>,\nthe same <code>hero</code> defined previously in the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> expression.</p>\n<p translation-result=\"\"><code>onSelect()</code> 是 <code>HeroesComponent</code> 上的一个方法，你很快就要写它。\nAngular 会把所点击的 <code>&#x3C;li></code> 上的 <code>hero</code> 对象传给它，这个 <code>hero</code> 也就是以前在 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 表达式中定义的那个。</p>\n<h3 translation-origin=\"off\" id=\"add-the-click-event-handler\">Add the click event handler<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-the-click-event-handler\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"add-the-click-event-handler\">添加 <code>click</code> 事件处理器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-the-click-event-handler\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Rename the component's <code>hero</code> property to <code>selectedHero</code> but don't assign it.\nThere is no <em>selected hero</em> when the application starts.</p>\n<p translation-result=\"\">把该组件的 <code>hero</code> 属性改名为 <code>selectedHero</code>，但不要为它赋值。\n因为应用刚刚启动时并没有<em>所选英雄</em>。</p>\n<p translation-origin=\"off\">Add the following <code>onSelect()</code> method, which assigns the clicked hero from the template\nto the component's <code>selectedHero</code>.</p>\n<p translation-result=\"\">添加如下 <code>onSelect()</code> 方法，它会把模板中被点击的英雄赋值给组件的 <code>selectedHero</code> 属性。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"on-select\" title=\"src/app/heroes/heroes.component.ts (onSelect)\" linenums=\"false\">\nselectedHero: Hero;\n\nonSelect(hero: Hero): void {\n  this.selectedHero = hero;\n}\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"update-the-details-template\">Update the details template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#update-the-details-template\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"update-the-details-template\">修改详情模板<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#update-the-details-template\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The template still refers to the component's old <code>hero</code> property which no longer exists.\nRename <code>hero</code> to <code>selectedHero</code>.</p>\n<p translation-result=\"\">该模板引用的仍然是老的 <code>hero</code> 属性，但它已经不存在了。\n把 <code>hero</code> 改名为 <code>selectedHero</code>。</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"selectedHero-details\" title=\"heroes.component.html (selected hero details)\" linenums=\"false\">\n&#x3C;h2>{{ selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&#x3C;/h2>\n&#x3C;div>&#x3C;span>id: &#x3C;/span>{{selectedHero.id}}&#x3C;/div>\n&#x3C;div>\n  &#x3C;label>name:\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\">\n  &#x3C;/label>\n&#x3C;/div>\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"hide-empty-details-with-ngif\">Hide empty details with <em>*ngIf</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#hide-empty-details-with-ngif\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"hide-empty-details-with-emngifem\">使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 隐藏空白的详情<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#hide-empty-details-with-emngifem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">After the browser refreshes, the application is broken.</p>\n<p translation-result=\"\">刷新浏览器，应用挂了。</p>\n<p translation-origin=\"off\">Open the browser developer tools and look in the console for an error message like this:</p>\n<p translation-result=\"\">打开浏览器的开发者工具，它的控制台中显示出如下错误信息：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  HeroesComponent.html:3 ERROR TypeError: Cannot read property 'name' of undefined\n</code-example>\n<p translation-origin=\"off\">Now click one of the list items.\nThe app seems to be working again.\nThe heroes appear in a list and details about the clicked hero appear at the bottom of the page.</p>\n<p translation-result=\"\">现在，从列表中随便点击一个条目。\n应用又正常了。\n英雄们显示在列表中，并且所点英雄的详情也显示在了页面的下方。</p>\n<h4 translation-origin=\"off\" id=\"what-happened\">What happened?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#what-happened\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"what-happened\">怎么回事？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#what-happened\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">When the app starts, the <code>selectedHero</code> is <code>undefined</code> <em>by design</em>.</p>\n<p translation-result=\"\">当应用启动时，<code>selectedHero</code> 是 <code>undefined</code>，<em>设计如此</em>。</p>\n<p translation-origin=\"off\">Binding expressions in the template that refer to properties of <code>selectedHero</code> — expressions like <code>{{selectedHero.name}}</code> — <em>must fail</em> because there is no selected hero.</p>\n<p translation-result=\"\">但模板中的绑定表达式引用了 <code>selectedHero</code> 的属性（表达式为 <code>{{selectedHero.name}}</code>），这必然会失败，因为你还没选过英雄呢。</p>\n<h4 translation-origin=\"off\" id=\"the-fix\">The fix<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#the-fix\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"the-fix\">修复<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#the-fix\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">The component should only display the selected hero details if the <code>selectedHero</code> exists.</p>\n<p translation-result=\"\">该组件应该只有当 <code>selectedHero</code> 存在时才显示所选英雄的详情。</p>\n<p translation-origin=\"off\">Wrap the hero detail HTML in a <code>&#x3C;div></code>.\nAdd Angular's <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive to the <code>&#x3C;div></code> and set it to <code>selectedHero</code>.</p>\n<p translation-result=\"\">把显示英雄详情的 HTML 包裹在一个 <code>&#x3C;div></code> 中。\n并且为这个 div 添加 Angular 的 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 指令，把它的值设置为 <code>selectedHero</code>。</p>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\">Don't forget the asterisk (*) in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. It's a critical part of the syntax.</p>\n<p translation-result=\"\">不要忘了 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 前面的星号（<code>*</code>），它是该语法中的关键部分。</p>\n</div>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"ng-if\" title=\"src/app/heroes/heroes.component.html (*ngIf)\" linenums=\"false\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n\n  &#x3C;h2>{{ selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\">\n    &#x3C;/label>\n  &#x3C;/div>\n\n&#x3C;/div>\n\n</code-example>\n<p translation-origin=\"off\">After the browser refreshes, the list of names reappears.\nThe details area is blank.\nClick a hero and its details appear.</p>\n<p translation-result=\"\">浏览器刷新之后，英雄名字的列表又出现了。\n详情部分仍然是空。\n点击一个英雄，它的详情就出现了。</p>\n<h4 translation-origin=\"off\" id=\"why-it-works\">Why it works<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#why-it-works\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"why-it-works\">为什么改好了？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#why-it-works\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">When <code>selectedHero</code> is undefined, the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> removes the hero detail from the DOM. There are no <code>selectedHero</code> bindings to worry about.</p>\n<p translation-result=\"\">当 <code>selectedHero</code> 为 <code>undefined</code> 时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 从 DOM 中移除了英雄详情。因此也就不用担心 <code>selectedHero</code> 的绑定了。</p>\n<p translation-origin=\"off\">When the user picks a hero, <code>selectedHero</code> has a value and\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> puts the hero detail into the DOM.</p>\n<p translation-result=\"\">当用户选择一个英雄时，<code>selectedHero</code> 也就有了值，并且 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 把英雄的详情放回到 DOM 中。</p>\n<h3 translation-origin=\"off\" id=\"style-the-selected-hero\">Style the selected hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-selected-hero\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"style-the-selected-hero\">给所选英雄添加样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-selected-hero\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">It's difficult to identify the <em>selected hero</em> in the list when all <code>&#x3C;li></code> elements look alike.</p>\n<p translation-result=\"\">所有的 <code>&#x3C;li></code> 元素看起来都是一样的，因此很难从列表中识别出<em>所选英雄</em>。</p>\n<p translation-origin=\"off\">If the user clicks \"Magneta\", that hero should render with a distinctive but subtle background color like this:</p>\n<p translation-result=\"\">如果用户点击了“Magneta”，这个英雄应该用一个略有不同的背景色显示出来，就像这样：</p>\n<figure>\n  <img src=\"generated/images/guide/toh/heroes-list-selected.png\" alt=\"Selected hero\" width=\"165\" height=\"129\">\n</figure>\n<p translation-origin=\"off\">That <em>selected hero</em> coloring is the work of the <code>.selected</code> CSS class in the <a href=\"tutorial/toh-pt2#styles\">styles you added earlier</a>.\nYou just have to apply the <code>.selected</code> class to the <code>&#x3C;li></code> when the user clicks it.</p>\n<p translation-result=\"\"><em>所选英雄</em>的颜色来自于<a href=\"tutorial/toh-pt2#styles\">你前面添加的样式</a>中的 CSS 类 <code>.selected</code>。\n所以你只要在用户点击一个 <code>&#x3C;li></code> 时把 <code>.selected</code> 类应用到该元素上就可以了。</p>\n<p translation-origin=\"off\">The Angular <a href=\"guide/template-syntax#class-binding\">class binding</a> makes it easy to add and remove a CSS class conditionally.\nJust add <code>[class.some-css-class]=\"some-condition\"</code> to the element you want to style.</p>\n<p translation-result=\"\">Angular 的 <a href=\"guide/template-syntax#class-binding\">CSS 类绑定</a>机制让根据条件添加或移除一个 CSS 类变得很容易。\n只要把 <code>[class.some-css-class]=\"some-condition\"</code> 添加到你要施加样式的元素上就可以了。</p>\n<p translation-origin=\"off\">Add the following <code>[class.selected]</code> binding to  the <code>&#x3C;li></code> in the <code>HeroesComponent</code> template:</p>\n<p translation-result=\"\">在 <code>HeroesComponent</code> 模板中的 <code>&#x3C;li></code> 元素上添加 <code>[class.selected]</code> 绑定，代码如下：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"class-selected\" title=\"heroes.component.html (toggle the &#x27;selected&#x27; CSS class)\" linenums=\"false\">\n[class.selected]=\"hero === selectedHero\"\n\n</code-example>\n<p translation-origin=\"off\">When the current row hero is the same as the <code>selectedHero</code>, Angular adds the <code>selected</code> CSS class. When the two heroes are different, Angular removes the class.</p>\n<p translation-result=\"\">如果当前行的英雄和 <code>selectedHero</code> 相同，Angular 就会添加 CSS 类 <code>selected</code>，否则就会移除它。</p>\n<p translation-origin=\"off\">The finished <code>&#x3C;li></code> looks like this:</p>\n<p translation-result=\"\">最终的 <code>&#x3C;li></code> 是这样的：</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"li\" title=\"heroes.component.html (list item hero)\" linenums=\"false\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n  [class.selected]=\"hero === selectedHero\"\n  (click)=\"onSelect(hero)\">\n  &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n&#x3C;/li>\n\n</code-example>\n<a id=\"final-code-review\"></a>\n<h2 translation-origin=\"off\" id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"final-code-review-2\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#final-code-review-2\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Your app should look like this <live-example></live-example>. </p>\n<p translation-result=\"\">你的应用现在变成了这样：<live-example></live-example>。</p>\n<p translation-origin=\"off\">Here are the code files discussed on this page, including the <code>HeroesComponent</code> styles.</p>\n<p translation-result=\"\">下面是本页面中所提及的代码文件，包括 <code>HeroesComponent</code> 的样式。</p>\n<code-tabs>\n  <code-pane title=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HEROES } from '../mock-heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  heroes = HEROES;\n\n  selectedHero: Hero;\n\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.html\" path=\"toh-pt2/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n\n  &#x3C;h2>{{ selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\">\n    &#x3C;/label>\n  &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes/heroes.component.css\" path=\"toh-pt2/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.selected {\n  background-color: #CFD8DC !important;\n  color: white;\n}\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n.heroes li.selected:hover {\n  background-color: #BBD8DC !important;\n  color: white;\n}\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n.heroes .text {\n  position: relative;\n  top: -3px;\n}\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#summary\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"summary-12\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#summary-12\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>\n<p translation-origin=\"off\">The Tour of Heroes app displays a list of heroes in a Master/Detail view.</p>\n<p translation-result=\"\"> 英雄指南应用在一个主从视图中显示了英雄列表。</p>\n</li>\n<li>\n<p translation-origin=\"off\">The user can select a hero and see that hero's details.</p>\n<p translation-result=\"\"> 用户可以选择一个英雄，并查看该英雄的详情。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You used <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> to display a list.</p>\n<p translation-result=\"\"> 你使用 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 显示了一个列表。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You used <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> to conditionally include or exclude a block of HTML.</p>\n<p translation-result=\"\"> 你使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 来根据条件包含或排除了一段 HTML。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You can toggle a CSS style class with a <code>class</code> binding.</p>\n<p translation-result=\"\"> 你可以用 <code>class</code> 绑定来切换 CSS 的样式类。</p>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n - tutorial/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/OnInit\n - api/forms/NgModel\n - guide/template-syntax#class-binding\n - guide/template-syntax#event-binding\n - guide/template-syntax#ngFor\n - tutorial/toh-pt0#app-wide-styles\n - tutorial/toh-pt2#add-a-click-event-binding\n - tutorial/toh-pt2#add-the-click-event-handler\n - tutorial/toh-pt2#create-mock-heroes\n - tutorial/toh-pt2#display-a-heroes-list\n - tutorial/toh-pt2#displaying-heroes\n - tutorial/toh-pt2#final-code-review\n - tutorial/toh-pt2#final-code-review-2\n - tutorial/toh-pt2#hide-empty-details-with-emngifem\n - tutorial/toh-pt2#hide-empty-details-with-ngif\n - tutorial/toh-pt2#list-heroes-with-emngforem\n - tutorial/toh-pt2#list-heroes-with-ngfor\n - tutorial/toh-pt2#masterdetail\n - tutorial/toh-pt2#style-the-heroes\n - tutorial/toh-pt2#style-the-selected-hero\n - tutorial/toh-pt2#styles\n - tutorial/toh-pt2#summary\n - tutorial/toh-pt2#summary-12\n - tutorial/toh-pt2#the-fix\n - tutorial/toh-pt2#update-the-details-template\n - tutorial/toh-pt2#what-happened\n - tutorial/toh-pt2#why-it-works\n-->"
}