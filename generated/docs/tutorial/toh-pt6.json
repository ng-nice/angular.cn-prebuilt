{
  "id": "tutorial/toh-pt6",
  "title": "HTTP",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"http\">HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#http\"><i class=\"material-icons\">link</i></a></h1>\n<p translation-origin=\"off\">In this tutorial, you'll add the following data persistence features with help from\nAngular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n<p translation-result=\"\">在这节课中，你将借助 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 来添加一些数据持久化特性。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">The <code>HeroService</code> gets hero data with HTTP requests.</p>\n<p translation-result=\"\"> <code>HeroService</code> 通过 HTTP 请求获取英雄数据。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Users can add, edit, and delete heroes and save these changes over HTTP.</p>\n<p translation-result=\"\"> 用户可以添加、编辑和删除英雄，并通过 HTTP 来保存这些更改。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Users can search for heroes by name.</p>\n<p translation-result=\"\"> 用户可以根据名字搜索英雄。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">当你完成这一章时，应用会变成这样：<live-example></live-example>。</p>\n<h2 translation-origin=\"off\" id=\"enable-http-services\">Enable HTTP services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"enable-http-services\">启用 HTTP 服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#enable-http-services\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is Angular's mechanism for communicating with a remote server over HTTP. </p>\n<p translation-result=\"\"><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 是 Angular 通过 HTTP 与远程服务器通讯的机制。</p>\n<p translation-origin=\"off\">To make <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> available everywhere in the app,</p>\n<p translation-result=\"\">要让 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 在应用中随处可用，请</p>\n<ul>\n<li>\n<p translation-origin=\"off\">open the root <code>AppModule</code>, </p>\n<p translation-result=\"\"> 打开根模块 <code>AppModule</code>，</p>\n</li>\n<li>\n<p translation-origin=\"off\">import the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> symbol from <code>@angular/common/http</code>,</p>\n<p translation-result=\"\"> 从 <code>@angular/common/http</code> 中导入 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 符号，</p>\n</li>\n<li>\n<p translation-origin=\"off\">add it to the <code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> array.</p>\n<p translation-result=\"\"> 把它加入 <code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> 数组。</p>\n</li>\n</ul>\n<h2 translation-origin=\"off\" id=\"simulate-a-data-server\">Simulate a data server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"simulate-a-data-server\">模拟数据服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-a-data-server\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">This tutorial sample <em>mimics</em> communication with a remote data server by using the\n<a href=\"https://github.com/angular/in-memory-web-api\" title=\"In-memory Web API\"><em>In-memory Web API</em></a> module.</p>\n<p translation-result=\"\">这个教学例子会与一个使用 <a href=\"https://github.com/angular/in-memory-web-api\" title=\"In-memory Web API\">内存 Web API（<em>In-memory Web API</em>）</a> 模拟出的远程数据服务器通讯。</p>\n<p translation-origin=\"off\">After installing the module, the app will make requests to and receive responses from the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>\nwithout knowing that the <em>In-memory Web API</em> is intercepting those requests,\napplying them to an in-memory data store, and returning simulated responses.</p>\n<p translation-result=\"\">安装完这个模块之后，应用将会通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 来发起请求和接收响应，而不用在乎实际上是这个内存 Web API 在拦截这些请求、操作一个内存数据库，并且给出仿真的响应。</p>\n<p translation-origin=\"off\">This facility is a great convenience for the tutorial.\nYou won't have to set up a server to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.</p>\n<p translation-result=\"\">这给本教程带来了极大的便利。你不用被迫先架设一个服务器再来学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p>\n<p translation-origin=\"off\">It may also be convenient in the early stages of your own app development when\nthe server's web api is ill-defined or not yet implemented.</p>\n<p translation-result=\"\">在你自己的应用开发的早期阶段这也同样很方便，那时候服务器的 Web API 可能定义上存在错误或者尚未实现。</p>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\"><strong>Important:</strong> the <em>In-memory Web API</em> module has nothing to do with HTTP in Angular.</p>\n<p translation-result=\"\"><strong>重要：</strong> 这个<em>内存 Web API</em> 模块与 Angular 中的 HTTP 模块无关。</p>\n<p translation-origin=\"off\">If you're just <em>reading</em> this tutorial to learn about <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you can <a href=\"tutorial/toh-pt6#import-heroes\">skip over</a> this step.\nIf you're <em>coding along</em> with this tutorial, stay here and add the <em>In-memory Web API</em> now.</p>\n<p translation-result=\"\">如果你只是在<em>阅读</em>本教程来学习 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>，那么可以<a href=\"tutorial/toh-pt6#import-heroes\">跳过</a>这一步。\n如果你正在随着本教程<em>敲代码</em>，那就留下来，并加上这个<em>内存 Web API</em>。</p>\n</div>\n<p translation-origin=\"off\">Install the <em>In-memory Web API</em> package from <em>npm</em></p>\n<p translation-result=\"\">从 <code>npm</code> 中安装这个<em>内存 Web API</em> 包（译注：请使用 0.5+ 的版本，不要使用 0.4-）</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm install angular-in-memory-web-api --save\n</code-example>\n<p translation-origin=\"off\">Import the <code>HttpClientInMemoryWebApiModule</code> and the <code>InMemoryDataService</code> class,\nwhich you will create in a moment.</p>\n<p translation-result=\"\">导入 <code>HttpClientInMemoryWebApiModule</code> 和 <code>InMemoryDataService</code> 类（你很快就要创建它）。</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"import-in-mem-stuff\" title=\"src/app/app.module.ts (In-memory Web API imports)\">\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\n</code-example>\n<p translation-origin=\"off\">Add the <code>HttpClientInMemoryWebApiModule</code> to the <code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> array—\n<em>after importing the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code></em>,\n—while configuring it with the <code>InMemoryDataService</code>.</p>\n<p translation-result=\"\">把 <code>HttpClientInMemoryWebApiModule</code> 添加到 <code>@<a href=\"api/core/NgModule#imports\" class=\"code-anchor\">NgModule.imports</a></code> 数组中（放在 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 之后），\n然后使用 <code>InMemoryDataService</code> 来配置它。</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"in-mem-web-api-imports\">\n<a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n// The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n// and returns simulated server responses.\n// Remove it when <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> real server is ready to receive requests.\nHttpClientInMemoryWebApiModule.forRoot(\n  InMemoryDataService, { dataEncapsulation: false }\n)\n\n</code-example>\n<p translation-origin=\"off\">The <code>forRoot()</code> configuration method takes an <code>InMemoryDataService</code> class\nthat primes the in-memory database.</p>\n<p translation-result=\"\"><code>forRoot()</code> 配置方法接受一个 <code>InMemoryDataService</code> 类（初期的内存数据库）作为参数。</p>\n<p translation-origin=\"off\">The <em>Tour of Heroes</em> sample creates such a class\n<code>src/app/in-memory-data.service.ts</code> which has the following content:</p>\n<p translation-result=\"\">在<em>英雄指南</em>范例中创建一个类 <code>src/app/in-memory-data.service.ts</code>，内容如下：</p>\n<code-example path=\"toh-pt6/src/app/in-memory-data.service.ts\" region=\"init\" title=\"src/app/in-memory-data.service.ts\" linenums=\"false\">\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\n\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Mr. Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n\n\n</code-example>\n<p translation-origin=\"off\">This file replaces <code>mock-heroes.ts</code>, which is now safe to delete.</p>\n<p translation-result=\"\">这个文件替代了 <code>mock-heroes.ts</code>（你可以安全删除它了）。</p>\n<p translation-origin=\"off\">When your server is ready, detach the <em>In-memory Web API</em>, and the app's requests will go through to the server.</p>\n<p translation-result=\"\">等你真实的服务器就绪时，就可以删除这个<em>内存 Web API</em>，该应用的请求就会直接发给真实的服务器。</p>\n<p translation-origin=\"off\">Now back to the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> story.</p>\n<p translation-result=\"\">现在，回来看 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p>\n<a id=\"import-heroes\"></a>\n<h2 translation-origin=\"off\" id=\"heroes-and-http\">Heroes and HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"heroes-and-http\">英雄与 HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Import some HTTP symbols that you'll need:</p>\n<p translation-result=\"\">导入一些所需的 HTTP 符号：</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-httpclient\" title=\"src/app/hero.service.ts (import HTTP symbols)\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/http';\n\n</code-example>\n<p translation-origin=\"off\">Inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the constructor in a private property called <code>http</code>.</p>\n<p translation-result=\"\">把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到构造函数中一个名叫 <code>http</code> 的私有属性中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"ctor\">\nconstructor(\n  private http: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n  private messageService: MessageService) { }\n\n</code-example>\n<p translation-origin=\"off\">Keep injecting the <code>MessageService</code>. You'll call it so frequently that\nyou'll wrap it in private <code>log</code> method.</p>\n<p translation-result=\"\">保留对 <code>MessageService</code> 的注入。你将会频繁调用它，因此请把它包裹进一个私有的 <code>log</code> 方法中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"log\">\n/** Log <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> HeroService message with the MessageService */\nprivate log(message: string) {\n  this.messageService.add('HeroService: ' + message);\n}\n\n</code-example>\n<p translation-origin=\"off\">Define the <code>heroesUrl</code> with the address of the heroes resource on the server.</p>\n<p translation-result=\"\">把服务器上英雄数据资源的访问地址定义为 <code>heroesURL</code>。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"heroesUrl\">\nprivate heroesUrl = 'api/heroes';  // URL to web api\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"get-heroes-with-httpclient\">Get heroes with <em>HttpClient</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-heroes-with-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"get-heroes-with-emhttpclientem\">通过 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 获取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-heroes-with-emhttpclientem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The current <code>HeroService.getHeroes()</code>\nuses the RxJS <code>of()</code> function to return an array of mock heroes\nas an <code>Observable&#x3C;Hero[]></code>.</p>\n<p translation-result=\"\">当前的 <code>HeroService.getHeroes()</code> 使用 RxJS 的 <code>of()</code> 函数来把模拟英雄数据返回为 <code>Observable&#x3C;Hero[]></code> 格式。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"getHeroes-1\" title=\"src/app/hero.service.ts (getHeroes with RxJs &#x27;of()&#x27;)\">\ngetHeroes(): Observable&#x3C;Hero[]> {\n  return of(HEROES);\n}\n\n</code-example>\n<p translation-origin=\"off\">Convert that method to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code></p>\n<p translation-result=\"\">把该方法转换成使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-1\">\n/** GET heroes from the server */\ngetHeroes (): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n}\n\n</code-example>\n<p translation-origin=\"off\">Refresh the browser. The hero data should successfully load from the\nmock server.</p>\n<p translation-result=\"\">刷新浏览器后，英雄数据就会从模拟服务器被成功读取。</p>\n<p translation-origin=\"off\">You've swapped <code>of</code> for <code>http.get</code> and the app keeps working without any other changes\nbecause both functions return an <code>Observable&#x3C;Hero[]></code>.</p>\n<p translation-result=\"\">你用 <code>http.get</code> 替换了 <code>of</code>，没有做其它修改，但是应用仍然在正常工作，这是因为这两个函数都返回了 <code>Observable&#x3C;Hero[]></code>。</p>\n<h3 translation-origin=\"off\" id=\"http-methods-return-one-value\">Http methods return one value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#http-methods-return-one-value\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"http-methods-return-one-value\">Http 方法返回单个值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#http-methods-return-one-value\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">All <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return an RxJS <code>Observable</code> of something.</p>\n<p translation-result=\"\">所有的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 方法都会返回某个值的 RxJS <code>Observable</code>。</p>\n<p translation-origin=\"off\">HTTP is a request/response protocol.\nYou make a request, it returns a single response.</p>\n<p translation-result=\"\">HTTP 是一个请求/响应式协议。你发起请求，它返回单个的响应。</p>\n<p translation-origin=\"off\">In general, an observable <em>can</em> return multiple values over time.\nAn observable from <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> always emits a single value and then completes, never to emit again.</p>\n<p translation-result=\"\">通常，<code>Observable</code> <em>可以</em>在一段时间内返回多个值。\n但来自 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的 <code>Observable</code> 总是发出一个值，然后结束，再也不会发出其它值。</p>\n<p translation-origin=\"off\">This particular <code>HttpClient.get</code> call returns an <code>Observable&#x3C;Hero[]></code>, literally \"<em>an observable of hero arrays</em>\". In practice, it will only return a single hero array.</p>\n<p translation-result=\"\">具体到这次 <code>HttpClient.get</code> 调用，它返回一个 <code>Observable&#x3C;Hero[]></code>，顾名思义就是“一个英雄数组的可观察对象”。在实践中，它也只会返回一个英雄数组。</p>\n<h3 translation-origin=\"off\" id=\"httpclientget-returns-response-data\"><em>HttpClient.get</em> returns response data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#httpclientget-returns-response-data\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"emhttpclientgetem-returns-response-data\"><code>HttpClient.get</code> 返回响应数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#emhttpclientgetem-returns-response-data\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\"><code>HttpClient.get</code> returns the <em>body</em> of the response as an untyped JSON object by default.\nApplying the optional type specifier, <code>&#x3C;Hero[]></code> , gives you a typed result object.</p>\n<p translation-result=\"\"><code>HttpClient.get</code> 默认情况下把响应体当做无类型的 JSON 对象进行返回。\n如果指定了可选的模板类型 <code>&#x3C;Hero[]></code>，就会给返回你一个类型化的对象。</p>\n<p translation-origin=\"off\">The shape of the JSON data is determined by the server's data API.\nThe <em>Tour of Heroes</em> data API returns the hero data as an array.</p>\n<p translation-result=\"\">JSON 数据的具体形态是由服务器的数据 API 决定的。\n<em>英雄指南</em>的数据 API 会把英雄数据作为一个数组进行返回。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Other APIs may bury the data that you want within an object.\nYou might have to dig that data out by processing the <code>Observable</code> result\nwith the RxJS <code>map</code> operator.</p>\n<p translation-result=\"\">其它 API 可能在返回对象中深埋着你想要的数据。\n你可能要借助 RxJS 的 <code>map</code> 操作符对 <code>Observable</code> 的结果进行处理，以便把这些数据挖掘出来。</p>\n<p translation-origin=\"off\">Although not discussed here, there's an example of <code>map</code> in the <code>getHeroNo404()</code>\nmethod included in the sample source code.</p>\n<p translation-result=\"\">虽然不打算在此展开讨论，不过你可以到范例源码中的 <code>getHeroNo404()</code> 方法中找到一个使用 <code>map</code> 操作符的例子。</p>\n</div>\n<h3 translation-origin=\"off\" id=\"error-handling\">Error handling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"error-handling-4\">错误处理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling-4\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Things go wrong, especially when you're getting data from a remote server.\nThe <code>HeroService.getHeroes()</code> method should catch errors and do something appropriate.</p>\n<p translation-result=\"\">凡事皆会出错，特别是当你从远端服务器获取数据的时候。\n<code>HeroService.getHeroes()</code> 方法应该捕获错误，并做适当的处理。</p>\n<p translation-origin=\"off\">To catch errors, you <strong>\"pipe\" the observable</strong> result from <code>http.get()</code> through an RxJS <code>catchError()</code> operator.</p>\n<p translation-result=\"\">要捕获错误，你就要使用 RxJS 的 <code>catchError()</code> 操作符来<strong>建立对 Observable 结果的处理管道（pipe）</strong>。</p>\n<p translation-origin=\"off\">Import the <code>catchError</code> symbol from <code>rxjs/operators</code>, along with some other operators you'll need later.</p>\n<p translation-result=\"\">从 <code>rxjs/operators</code> 中导入 <code>catchError</code> 符号，以及你稍后将会用到的其它操作符。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"import-rxjs-operators\">\nimport { catchError, map, tap } from 'rxjs/operators';\n\n</code-example>\n<p translation-origin=\"off\">Now extend the observable result with the <code>.pipe()</code> method and\ngive it a <code>catchError()</code> operator.</p>\n<p translation-result=\"\">现在，使用 <code>.pipe()</code> 方法来扩展 <code>Observable</code> 的结果，并给它一个 <code>catchError()</code> 操作符。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes-2\">\ngetHeroes (): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n    .pipe(\n      catchError(this.handleError('getHeroes', []))\n    );\n}\n\n</code-example>\n<p translation-origin=\"off\">The <code>catchError()</code> operator intercepts an <strong><code>Observable</code> that failed</strong>.\nIt passes the error an <em>error handler</em> that can do what it wants with the error.</p>\n<p translation-result=\"\"><code>catchError()</code> 操作符会拦截<strong>失败的 <code>Observable</code></strong>。\n它把错误对象传给<em>错误处理器</em>，<em>错误处理器</em>会处理这个错误。</p>\n<p translation-origin=\"off\">The following <code>handleError()</code> method reports the error and then returns an\ninnocuous result so that the application keeps working.</p>\n<p translation-result=\"\">下面的 <code>handleError()</code> 方法会报告这个错误，并返回一个无害的结果（安全值），以便应用能正常工作。</p>\n<h4 translation-origin=\"off\" id=\"handleerror\"><em>handleError</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#handleerror\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">The following <code>errorHandler()</code> will be shared by many <code>HeroService</code> methods\nso it's generalized to meet their different needs.</p>\n<p translation-result=\"\">下面这个 <code>errorHandler()</code> 将会在很多 <code>HeroService</code> 的方法之间共享，所以要把它通用化，以支持这些彼此不同的需求。</p>\n<p translation-origin=\"off\">Instead of handling the error directly, it returns an <em>error handler</em> function to <code>catchError</code> that it\nhas configured with both the name of the operation that failed and a safe return value.</p>\n<p translation-result=\"\">它不再直接处理这些错误，而是返回给 <code>catchError</code> 返回一个<em>错误处理</em>函数。还要用操作名和出错时要返回的安全值来对这个错误处理函数进行配置。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"handleError\">\n/**\n * Handle <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> operation that failed.\n * Let the app continue.\n * @param operation - name of the operation that failed\n * @param result - optional value to return as the observable result\n */\nprivate handleError&#x3C;T> (operation = 'operation', result?: T) {\n  return (error: any): Observable&#x3C;T> => {\n\n    // TODO: send the error to remote logging infrastructure\n    console.error(error); // log to console instead\n\n    // TODO: better job of transforming error for user consumption\n    this.log(`${operation} failed: ${error.message}`);\n\n    // Let the app keep running by returning an empty result.\n    return of(result as T);\n  };\n}\n\n</code-example>\n<p translation-origin=\"off\">After reporting the error to console, the handler constructs\na user friendly message and returns a safe value to the app so it can keep working.</p>\n<p translation-result=\"\">在控制台中汇报了这个错误之后，这个处理器会汇报一个用户友好的消息，并给应用返回一个安全值，让它继续工作。</p>\n<p translation-origin=\"off\">Because each service method returns a different kind of <code>Observable</code> result,\n<code>errorHandler()</code> takes a type parameter so it can return the safe value as the type that the app expects.</p>\n<p translation-result=\"\">因为每个服务方法都会返回不同类型的 <code>Observable</code> 结果，因此 <code>errorHandler()</code> 也需要一个类型参数，以便它返回一个此类型的安全值，正如应用所期望的那样。</p>\n<h3 translation-origin=\"off\" id=\"tap-into-the-observable\">Tap into the <em>Observable</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#tap-into-the-observable\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"tap-into-the-emobservableem\">窥探 <code>Observable</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#tap-into-the-emobservableem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The <code>HeroService</code> methods will <strong>tap</strong> into the flow of observable values\nand send a message (via <code>log()</code>) to the message area at the bottom of the page.</p>\n<p translation-result=\"\"><code>HeroService</code> 的方法将会窥探 <code>Observable</code> 的数据流，并通过 <code>log()</code> 函数往页面底部发送一条消息。</p>\n<p translation-origin=\"off\">They'll do that with the RxJS <code>tap</code> operator,\nwhich <em>looks</em> at the observable values, does <em>something</em> with those values,\nand passes them along.\nThe <code>tap</code> call back doesn't touch the values themselves.</p>\n<p translation-result=\"\">它们可以使用 RxJS 的 <code>tap</code> 操作符来实现，该操作符会<em>查看</em> Observable 中的值，使用那些值做一些事情，并且把它们传出来。\n这种 <code>tap</code> 回调不会改变这些值本身。</p>\n<p translation-origin=\"off\">Here is the final version of <code>getHeroes</code> with the <code>tap</code> that logs the operation.</p>\n<p translation-result=\"\">下面是 <code>getHeroes</code> 的最终版本，它使用 <code>tap</code> 来记录各种操作。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes\">\n/** GET heroes from the server */\ngetHeroes (): Observable&#x3C;Hero[]> {\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n    .pipe(\n      tap(heroes => this.log(`fetched heroes`)),\n      catchError(this.handleError('getHeroes', []))\n    );\n}\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"get-hero-by-id\">Get hero by id<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"get-hero-by-id\">通过 id 获取英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Most web APIs support a <em>get by id</em> request in the form <code>api/hero/:id</code>\n(such as <code>api/hero/11</code>).\nAdd a <code>HeroService.getHero()</code> method to make that request:</p>\n<p translation-result=\"\">大多数 web API 都可以通过 <code>api/hero/:id</code> 的形式（比如 <code>api/hero/:id</code> ）支持<em>根据 id 获取单个对象</em>。\n添加一个 <code>HeroService.getHero()</code> 方法来发起请求：</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHero\" title=\"src/app/hero.service.ts\">\n/** GET hero by id. Will 404 if id not found */\ngetHero(id: number): Observable&#x3C;Hero> {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get&#x3C;Hero>(url).pipe(\n    tap(_ => this.log(`fetched hero id=${id}`)),\n    catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n  );\n}\n\n</code-example>\n<p translation-origin=\"off\">There are three significant differences from  <code>getHeroes()</code>.</p>\n<p translation-result=\"\">这里和 <code>getHeroes()</code> 相比有三个显著的差异。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">it constructs a request URL with the desired hero's id.</p>\n<p translation-result=\"\"> 它使用想获取的英雄的 id 构建了一个请求 URL。</p>\n</li>\n<li>\n<p translation-origin=\"off\">the server should respond with a single hero rather than an array of heroes.</p>\n<p translation-result=\"\"> 服务器应该使用单个英雄作为回应，而不是一个英雄数组。</p>\n</li>\n<li>\n<p translation-origin=\"off\">therefore, <code>getHero</code> returns an <code>Observable&#x3C;Hero></code> (\"<em>an observable of Hero objects</em>\")\nrather than an observable of hero <em>arrays</em> .</p>\n<p translation-result=\"\">  所以，<code>getHero</code> 会返回 <code>Observable&#x3C;Hero></code>（“一个可观察的<em>单个英雄对象</em>”），而不是一个可观察的英雄对象<em>数组</em>。</p>\n</li>\n</ul>\n<h2 translation-origin=\"off\" id=\"update-heroes\">Update heroes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"update-heroes\">修改英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#update-heroes\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Editing a hero's name in the <em>hero detail</em> view.\nAs you type, the hero name updates the heading at the top of the page.\nBut when you click the \"go back button\", the changes are lost.</p>\n<p translation-result=\"\">在<em>英雄详情</em>视图中编辑英雄的名字。\n随着输入，英雄的名字也跟着在页面顶部的标题区更新了。\n但是当你点击“后退”按钮时，这些修改都丢失了。</p>\n<p translation-origin=\"off\">If you want changes to persist, you must write them back to\nthe server.</p>\n<p translation-result=\"\">如果你希望保留这些修改，就要把它们写回到服务器。</p>\n<p translation-origin=\"off\">At the end of the hero detail template, add a save button with a <code>click</code> event\nbinding that invokes a new component method named <code>save()</code>.</p>\n<p translation-result=\"\">在英雄详情模板的底部添加一个保存按钮，它绑定了一个 <code>click</code> 事件，事件绑定会调用组件中一个名叫 <code>save()</code> 的新方法：</p>\n<code-example path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\" region=\"save\" title=\"src/app/hero-detail/hero-detail.component.html (save)\">\n&#x3C;button (click)=\"save()\">save&#x3C;/button>\n\n</code-example>\n<p translation-origin=\"off\">Add the following <code>save()</code> method, which persists hero name changes using the hero service\n<code>updateHero()</code> method and then navigates back to the previous view.</p>\n<p translation-result=\"\">添加如下的 <code>save()</code> 方法，它使用英雄服务中的 <code>updateHero()</code> 方法来保存对英雄名字的修改，然后导航回前一个视图。</p>\n<code-example path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\" region=\"save\" title=\"src/app/hero-detail/hero-detail.component.ts (save)\">\nsave(): void {\n   this.heroService.updateHero(this.hero)\n     .subscribe(() => this.goBack());\n }\n\n</code-example>\n<h4 translation-origin=\"off\" id=\"add-heroserviceupdatehero\">Add <em>HeroService.updateHero()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceupdatehero\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"add-emheroserviceupdateheroem\">添加 <em>HeroService.updateHero()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-emheroserviceupdateheroem\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">The overall structure of the <code>updateHero()</code> method is similar to that of\n<code>getHeroes()</code>, but it uses <code>http.put()</code> to persist the changed hero\non the server.</p>\n<p translation-result=\"\"><code>updateHero()</code> 的总体结构和 <code>getHeroes()</code> 很相似，但它会使用 <code>http.put()</code> 来把修改后的英雄保存到服务器上。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"updateHero\" title=\"src/app/hero.service.ts (update)\">\n/** PUT: update the hero on the server */\nupdateHero (hero: Hero): Observable&#x3C;any> {\n  return this.http.put(this.heroesUrl, hero, httpOptions).pipe(\n    tap(_ => this.log(`updated hero id=${hero.id}`)),\n    catchError(this.handleError&#x3C;any>('updateHero'))\n  );\n}\n\n</code-example>\n<p translation-origin=\"off\">The <code><a href=\"\" class=\"code-anchor\">HttpClient.put()</a></code> method takes three parameters</p>\n<p translation-result=\"\"><code><a href=\"\" class=\"code-anchor\">HttpClient.put()</a></code> 方法接受三个参数</p>\n<ul>\n<li>\n<p translation-origin=\"off\">the URL</p>\n<p translation-result=\"\"> URL 地址</p>\n</li>\n<li>\n<p translation-origin=\"off\">the data to update (the modified hero in this case)</p>\n<p translation-result=\"\"> 要修改的数据（这里就是修改后的英雄）</p>\n</li>\n<li>\n<p translation-origin=\"off\">options</p>\n<p translation-result=\"\"> 选项</p>\n</li>\n</ul>\n<p translation-origin=\"off\">The URL is unchanged. The heroes web API knows which hero to update by looking at the hero's <code>id</code>.</p>\n<p translation-result=\"\">URL 没变。英雄 Web API 通过英雄对象的 <code>id</code> 就可以知道要修改哪个英雄。</p>\n<p translation-origin=\"off\">The heroes web API expects a special header in HTTP save requests.\nThat header is in the <code>httpOptions</code> constant defined in the <code>HeroService</code>.</p>\n<p translation-result=\"\">英雄 Web API 期待在保存时的请求中有一个特殊的头。\n这个头是在 <code>HeroService</code> 的 <code>httpOptions</code> 常量中定义的。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"http-options\">\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n</code-example>\n<p translation-origin=\"off\">Refresh the browser, change a hero name, save your change,\nand click the \"go back\" button.\nThe hero now appears in the list with the changed name.</p>\n<p translation-result=\"\">刷新浏览器，修改英雄名，保存这些修改，然后点击“后退”按钮。\n现在，改名后的英雄已经显示在列表中了。</p>\n<h2 translation-origin=\"off\" id=\"add-a-new-hero\">Add a new hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"add-a-new-hero\">添加新英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-new-hero\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">To add a hero, this app only needs the hero's name. You can use an <code>input</code>\nelement paired with an add button.</p>\n<p translation-result=\"\">要添加英雄，本应用中只需要英雄的名字。你可以使用一个和添加按钮成对的 <code>input</code> 元素。</p>\n<p translation-origin=\"off\">Insert the following into the <code>HeroesComponent</code> template, just after\nthe heading:</p>\n<p translation-result=\"\">把下列代码插入到 <code>HeroesComponent</code> 模板中标题的紧后面：</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"add\" title=\"src/app/heroes/heroes.component.html (add)\">\n&#x3C;div>\n  &#x3C;label>Hero name:\n    &#x3C;input #heroName />\n  &#x3C;/label>\n  &#x3C;!-- (click) passes input value to add() and then clears the input -->\n  &#x3C;button (click)=\"add(heroName.value); heroName.value=''\">\n    add\n  &#x3C;/button>\n&#x3C;/div>\n\n</code-example>\n<p translation-origin=\"off\">In response to a click event, call the component's click handler and then\nclear the input field so that it's ready for another name.</p>\n<p translation-result=\"\">当点击事件触发时，调用组件的点击处理器，然后清空这个输入框，以便用来输入另一个名字。</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"add\" title=\"src/app/heroes/heroes.component.ts (add)\">\nadd(name: string): void {\n  name = name.trim();\n  if (!name) { return; }\n  this.heroService.addHero({ name } as Hero)\n    .subscribe(hero => {\n      this.heroes.push(hero);\n    });\n}\n\n</code-example>\n<p translation-origin=\"off\">When the given name is non-blank, the handler creates a <code>Hero</code>-like object\nfrom the name (it's only missing the <code>id</code>) and passes it to the services <code>addHero()</code> method.</p>\n<p translation-result=\"\">当指定的名字非空时，这个处理器会用这个名字创建一个类似于 <code>Hero</code> 的对象（只缺少 <code>id</code> 属性），并把它传给服务的 <code>addHero()</code> 方法。</p>\n<p translation-origin=\"off\">When <code>addHero</code> saves successfully, the <code>subscribe</code> callback\nreceives the new hero and pushes it into to the <code>heroes</code> list for display.</p>\n<p translation-result=\"\">当 <code>addHero</code> 保存成功时，<code>subscribe</code> 的回调函数会收到这个新英雄，并把它追加到 <code>heroes</code> 列表中以供显示。</p>\n<p translation-origin=\"off\">You'll write <code>HeroService.addHero</code> in the next section.</p>\n<p translation-result=\"\">你将在下一节编写 <code>HeroService.addHero</code>。</p>\n<h4 translation-origin=\"off\" id=\"add-heroserviceaddhero\">Add <em>HeroService.addHero()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroserviceaddhero\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"add-emheroserviceaddheroem\">添加 <code>HeroService.addHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-emheroserviceaddheroem\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">Add the following <code>addHero()</code> method to the <code>HeroService</code> class.</p>\n<p translation-result=\"\">往 <code>HeroService</code> 类中添加 <code>addHero()</code> 方法。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"addHero\" title=\"src/app/hero.service.ts (addHero)\">\n/** POST: add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new hero to the server */\naddHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions).pipe(\n    tap((hero: Hero) => this.log(`added hero w/ id=${hero.id}`)),\n    catchError(this.handleError&#x3C;Hero>('addHero'))\n  );\n}\n\n</code-example>\n<p translation-origin=\"off\"><code>HeroService.addHero()</code> differs from <code>updateHero</code> in two ways.</p>\n<p translation-result=\"\"><code>HeroService.addHero()</code> 和 <code>updateHero</code> 有两点不同。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">it calls <code><a href=\"\" class=\"code-anchor\">HttpClient.post()</a></code> instead of <code>put()</code>.</p>\n<p translation-result=\"\"> 它调用 <code><a href=\"\" class=\"code-anchor\">HttpClient.post()</a></code> 而不是 <code>put()</code>。</p>\n</li>\n<li>\n<p translation-origin=\"off\">it expects the server to generates an id for the new hero,\nwhich it returns in the <code>Observable&#x3C;Hero></code> to the caller.</p>\n<p translation-result=\"\">   它期待服务器为这个新的英雄生成一个 id，然后把它通过 <code>Observable&#x3C;Hero></code> 返回给调用者。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Refresh the browser and add some heroes.</p>\n<p translation-result=\"\">刷新浏览器，并添加一些英雄。</p>\n<h2 translation-origin=\"off\" id=\"delete-a-hero\">Delete a hero<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"delete-a-hero\">删除某个英雄<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#delete-a-hero\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Each hero in the heroes list should have a delete button.</p>\n<p translation-result=\"\">英雄列表中的每个英雄都有一个删除按钮。</p>\n<p translation-origin=\"off\">Add the following button element to the <code>HeroesComponent</code> template, after the hero\nname in the repeated <code>&#x3C;li></code> element.</p>\n<p translation-result=\"\">把下列按钮（<code>button</code>）元素添加到 <code>HeroesComponent</code> 的模板中，就在每个 <code>&#x3C;li></code> 元素中的英雄名字后方。</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"delete\">\n&#x3C;button class=\"delete\" title=\"delete hero\"\n(click)=\"delete(hero)\">x&#x3C;/button>\n\n</code-example>\n<p translation-origin=\"off\">The HTML for the list of heroes should look like this:</p>\n<p translation-result=\"\">英雄列表的 HTML 应该是这样的：</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.html\" region=\"list\" title=\"src/app/heroes/heroes.component.html (list of heroes)\">\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n    &#x3C;button class=\"delete\" title=\"delete hero\"\n    (click)=\"delete(hero)\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p translation-origin=\"off\">To position the delete button at the far right of the hero entry,\nadd some CSS to the <code>heroes.component.css</code>.  You'll find that CSS\nin the <a href=\"tutorial/toh-pt6#heroescomponent\">final review code</a> below.</p>\n<p translation-result=\"\">要把删除按钮定位在每个英雄条目的最右边，就要往 <code>heroes.component.css</code> 中添加一些 CSS。你可以在下方的 <a href=\"tutorial/toh-pt6#heroescomponent\">最终代码</a> 中找到这些 CSS。</p>\n<p translation-origin=\"off\">Add the <code>delete()</code> handler to the component.</p>\n<p translation-result=\"\">把 <code>delete()</code> 处理器添加到组件中。</p>\n<code-example path=\"toh-pt6/src/app/heroes/heroes.component.ts\" region=\"delete\" title=\"src/app/heroes/heroes.component.ts (delete)\">\ndelete(hero: Hero): void {\n  this.heroes = this.heroes.filter(h => h !== hero);\n  this.heroService.deleteHero(hero).subscribe();\n}\n\n</code-example>\n<p translation-origin=\"off\">Although the component delegates hero deletion to the <code>HeroService</code>,\nit remains responsible for updating its own list of heroes.\nThe component's <code>delete()</code> method immediately removes the <em>hero-to-delete</em> from that list,\nanticipating that the <code>HeroService</code> will succeed on the server.</p>\n<p translation-result=\"\">虽然这个组件把删除英雄的逻辑委托给了 <code>HeroService</code>，但扔保留了更新它自己的英雄列表的职责。\n组件的 <code>delete()</code> 方法会在 <code>HeroService</code> 对服务器的操作成功之前，先从列表中移除<em>要删除的英雄</em>。</p>\n<p translation-origin=\"off\">There's really nothing for the component to do with the <code>Observable</code> returned by\n<code>heroService.delete()</code>. <strong>It must subscribe anyway</strong>.</p>\n<p translation-result=\"\">组件与 <code>heroService.delete()</code> 返回的 <code>Observable</code> 还完全没有关联。<strong>必须订阅它</strong>。</p>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\">  If you neglect to <code>subscribe()</code>, the service will not send the delete request to the server!\nAs a rule, an <code>Observable</code> <em>does nothing</em> until something subscribes!</p>\n<p translation-result=\"\">  如果你忘了调用 <code>subscribe()</code>，本服务将不会把这个删除请求发送给服务器。\n作为一条通用的规则，<code>Observable</code> 在有人订阅之前<em>什么都不会做</em>。</p>\n<p translation-origin=\"off\">  Confirm this for yourself by temporarily removing the <code>subscribe()</code>,\nclicking \"Dashboard\", then clicking \"Heroes\".\nYou'll see the full list of heroes again.</p>\n<p translation-result=\"\">  你可以暂时删除 <code>subscribe()</code> 来确认这一点。点击“Dashboard”，然后点击“Heroes”，就又看到完整的英雄列表了。</p>\n</div>\n<h4 translation-origin=\"off\" id=\"add-heroservicedeletehero\">Add <em>HeroService.deleteHero()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-heroservicedeletehero\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"add-emheroservicedeleteheroem\">添加 <code>HeroService.deleteHero()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-emheroservicedeleteheroem\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">Add a <code>deleteHero()</code> method to <code>HeroService</code> like this.</p>\n<p translation-result=\"\">把 <code>deleteHero()</code> 方法添加到 <code>HeroService</code> 中，代码如下。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"deleteHero\" title=\"src/app/hero.service.ts (delete)\">\n/** DELETE: delete the hero from the server */\ndeleteHero (hero: Hero | number): Observable&#x3C;Hero> {\n  const id = typeof hero === 'number' ? hero : hero.id;\n  const url = `${this.heroesUrl}/${id}`;\n\n  return this.http.delete&#x3C;Hero>(url, httpOptions).pipe(\n    tap(_ => this.log(`deleted hero id=${id}`)),\n    catchError(this.handleError&#x3C;Hero>('deleteHero'))\n  );\n}\n\n</code-example>\n<p translation-origin=\"off\">Note that</p>\n<p translation-result=\"\">注意</p>\n<ul>\n<li>\n<p translation-origin=\"off\">it calls <code>HttpClient.delete</code>.</p>\n<p translation-result=\"\"> 它调用了 <code>HttpClient.delete</code>。</p>\n</li>\n<li>\n<p translation-origin=\"off\">the URL is the heroes resource URL plus the <code>id</code> of the hero to delete</p>\n<p translation-result=\"\"> URL 就是英雄的资源 URL 加上要删除的英雄的 <code>id</code>。</p>\n</li>\n<li>\n<p translation-origin=\"off\">you don't send data as you did with <code>put</code> and <code>post</code>.</p>\n<p translation-result=\"\"> 你不用像 <code>put</code> 和 <code>post</code> 中那样发送任何数据。</p>\n</li>\n<li>\n<p translation-origin=\"off\">you still send the <code>httpOptions</code>.</p>\n<p translation-result=\"\"> 你仍要发送 <code>httpOptions</code>。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Refresh the browser and try the new delete functionality.</p>\n<p translation-result=\"\">刷新浏览器，并试一下这个新的删除功能。</p>\n<h2 translation-origin=\"off\" id=\"search-by-name\">Search by name<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"search-by-name\">根据名字搜索<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-by-name\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">In this last exercise, you learn to chain <code>Observable</code> operators together\nso you can minimize the number of similar HTTP requests\nand consume network bandwidth economically.</p>\n<p translation-result=\"\">在最后一次练习中，你要学到把 <code>Observable</code> 的操作符串在一起，让你能将相似 HTTP 请求的数量最小化，并节省网络带宽。</p>\n<p translation-origin=\"off\">You will add a <em>heroes search</em> feature to the <em>Dashboard</em>.\nAs the user types a name into a search box,\nyou'll make repeated HTTP requests for heroes filtered by that name.\nYour goal is to issue only as many requests as necessary.</p>\n<p translation-result=\"\">你将往<em>仪表盘</em>中加入<em>英雄搜索</em>特性。\n当用户在搜索框中输入名字时，你会不断发送根据名字过滤英雄的 HTTP 请求。\n你的目标是仅仅发出尽可能少的必要请求。</p>\n<h4 translation-origin=\"off\" id=\"heroservicesearchheroes\"><em>HeroService.searchHeroes</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservicesearchheroes\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">Start by adding a <code>searchHeroes</code> method to the <code>HeroService</code>.</p>\n<p translation-result=\"\">先把 <code>searchHeroes</code> 方法添加到 <code>HeroService</code> 中。</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"searchHeroes\" title=\"src/app/hero.service.ts\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  if (!term.trim()) {\n    // if not search term, return empty hero array.\n    return of([]);\n  }\n  return this.http.get&#x3C;Hero[]>(`api/heroes/?name=${term}`).pipe(\n    tap(_ => this.log(`found heroes matching \"${term}\"`)),\n    catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n  );\n}\n\n</code-example>\n<p translation-origin=\"off\">The method returns immediately with an empty array if there is no search term.\nThe rest of it closely resembles <code>getHeroes()</code>.\nThe only significant difference is the URL,\nwhich includes a query string with the search term.</p>\n<p translation-result=\"\">如果没有搜索词，该方法立即返回一个空数组。\n剩下的部分和 <code>getHeroes()</code> 很像。\n唯一的不同点是 URL，它包含了一个由搜索词组成的查询字符串。</p>\n<h3 translation-origin=\"off\" id=\"add-search-to-the-dashboard\">Add search to the Dashboard<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"add-search-to-the-dashboard\">为仪表盘添加搜索功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-search-to-the-dashboard\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Open the <code>DashboardComponent</code> <em>template</em> and\nAdd the hero search element, <code>&#x3C;app-hero-search></code>, to the bottom of the <code>DashboardComponent</code> template.</p>\n<p translation-result=\"\">打开 <code>DashboardComponent</code> 的<em>模板</em>并且把用于搜索英雄的元素 <code>&#x3C;app-hero-search></code> 添加到 <code>DashboardComponent</code> 模板的底部。</p>\n<code-example path=\"toh-pt6/src/app/dashboard/dashboard.component.html\" title=\"src/app/dashboard/dashboard.component.html\" linenums=\"false\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/div>\n\n&#x3C;app-hero-search>&#x3C;/app-hero-search>\n\n\n</code-example>\n<p translation-origin=\"off\">This template looks a lot like the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater in the <code>HeroesComponent</code> template.</p>\n<p translation-result=\"\">这个模板看起来很像 <code>HeroesComponent</code> 模板中的 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 复写器。</p>\n<p translation-origin=\"off\">Unfortunately, adding this element breaks the app.\nAngular can't find a component with a selector that matches <code>&#x3C;app-hero-search></code>.</p>\n<p translation-result=\"\">很不幸，添加这个元素让本应用挂了。\nAngular 找不到哪个组件的选择器能匹配上 <code>&#x3C;app-hero-search></code>。</p>\n<p translation-origin=\"off\">The <code>HeroSearchComponent</code> doesn't exist yet. Fix that.</p>\n<p translation-result=\"\"><code>HeroSearchComponent</code> 还不存在，这就解决。</p>\n<h3 translation-origin=\"off\" id=\"create-herosearchcomponent\">Create <em>HeroSearchComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#create-herosearchcomponent\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"create-emherosearchcomponentem\">创建 <code>HeroSearchComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#create-emherosearchcomponentem\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Create a <code>HeroSearchComponent</code> with the CLI.</p>\n<p translation-result=\"\">使用 CLI 创建一个 <code>HeroSearchComponent</code>。</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component hero-search\n</code-example>\n<p translation-origin=\"off\">The CLI generates the three <code>HeroSearchComponent</code> and adds the component to the `AppModule' declarations</p>\n<p translation-result=\"\">CLI 生成了 <code>HeroSearchComponent</code> 的三个文件，并把该组件添加到了 <code>AppModule</code> 的声明中。</p>\n<p translation-origin=\"off\">Replace the generated <code>HeroSearchComponent</code> <em>template</em> with a text box and a list of matching search results like this.</p>\n<p translation-result=\"\">把生成的 <code>HeroSearchComponent</code> 的<em>模板</em>改成一个输入框和一个匹配到的搜索结果的列表。代码如下：</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" title=\"src/app/hero-search/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;h4>Hero Search&#x3C;/h4>\n\n  &#x3C;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" />\n\n  &#x3C;ul class=\"search-result\">\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n      &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n        {{hero.name}}\n      &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n    &#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n\n\n</code-example>\n<p translation-origin=\"off\">Add private CSS styles to <code>hero-search.component.css</code>\nas listed in the <a href=\"tutorial/toh-pt6#herosearchcomponent\">final code review</a> below.</p>\n<p translation-result=\"\">从下面的 <a href=\"tutorial/toh-pt6#herosearchcomponent\">最终代码</a> 中把私有 CSS 样式添加到 <code>hero-search.component.css</code> 中。</p>\n<p translation-origin=\"off\">As the user types in the search box, a <em>keyup</em> event binding calls the component's <code>search()</code>\nmethod with the new search box value.</p>\n<p translation-result=\"\">当用户在搜索框中输入时，一个 <em>keyup</em> 事件绑定会调用该组件的 <code>search()</code> 方法，并传入新的搜索框的值。</p>\n<a id=\"asyncpipe\"></a>\n<h3 translation-origin=\"off\" id=\"asyncpipe\"><em>AsyncPipe</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#asyncpipe\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">As expected, the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeats hero objects.</p>\n<p translation-result=\"\">如你所愿，<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 重复渲染出了这些英雄。</p>\n<p translation-origin=\"off\">Look closely and you'll see that the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> iterates over a list called <code>heroes$</code>, not <code>heroes</code>.</p>\n<p translation-result=\"\">仔细看，你会发现 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 是在一个名叫 <code>heroes$</code> 的列表上迭代，而不是 <code>heroes</code>。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"async\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n\n</code-example>\n<p translation-origin=\"off\">The <code>$</code> is a convention that indicates <code>heroes$</code> is an <code>Observable</code>, not an array.</p>\n<p translation-result=\"\"><code>$</code> 是一个命名惯例，用来表明 <code>heroes$</code> 是一个 <code>Observable</code>，而不是数组。</p>\n<p translation-origin=\"off\">The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> can't do anything with an <code>Observable</code>.\nBut there's also a pipe character (<code>|</code>) followed by <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code>,\nwhich identifies Angular's <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>.</p>\n<p translation-result=\"\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 不能直接使用 <code>Observable</code>。\n不过，它后面还有一个管道字符（<code>|</code>），后面紧跟着一个 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code>，它表示 Angular 的 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>。</p>\n<p translation-origin=\"off\">The <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> subscribes to an <code>Observable</code> automatically so you won't have to\ndo so in the component class.</p>\n<p translation-result=\"\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code> 会自动订阅到 <code>Observable</code>，这样你就不用再在组件类中订阅了。</p>\n<h3 translation-origin=\"off\" id=\"fix-the-herosearchcomponent-class\">Fix the <em>HeroSearchComponent</em> class<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#fix-the-herosearchcomponent-class\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"fix-the-emherosearchcomponentem-class\">修正 <code>HeroSearchComponent</code> 类<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#fix-the-emherosearchcomponentem-class\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Replace the generated <code>HeroSearchComponent</code> class and metadata as follows.</p>\n<p translation-result=\"\">修改所生成的 <code>HeroSearchComponent</code> 类及其元数据，代码如下：</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" title=\"src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) => this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-example>\n<p translation-origin=\"off\">Notice the declaration of <code>heroes$</code> as an <code>Observable</code></p>\n<p translation-result=\"\">注意，<code>heroes$</code> 声明为一个 <code>Observable</code></p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"heroes-stream\">\nheroes$: Observable&#x3C;Hero[]>;\n\n</code-example>\n<p translation-origin=\"off\">You'll set it in <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a>.\nBefore you do, focus on the definition of <code>searchTerms</code>.</p>\n<p translation-result=\"\">你将会在 <a href=\"tutorial/toh-pt6#search-pipe\"><code>ngOnInit()</code></a> 中设置它，在此之前，先仔细看看 <code>searchTerms</code> 的定义。</p>\n<h3 translation-origin=\"off\" id=\"the-searchterms-rxjs-subject\">The <em>searchTerms</em> RxJS subject<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#the-searchterms-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"the-emsearchtermsem-rxjs-subject\">RxJS <code>Subject</code> 类型的 <code>searchTerms</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#the-emsearchtermsem-rxjs-subject\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">The <code>searchTerms</code> property is declared as an RxJS <code>Subject</code>.</p>\n<p translation-result=\"\"><code>searchTerms</code> 属性声明成了 RxJS 的 <code>Subject</code> 类型。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"searchTerms\">\nprivate searchTerms = new Subject&#x3C;string>();\n\n// Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> search term into the observable stream.\nsearch(term: string): void {\n  this.searchTerms.next(term);\n}\n\n</code-example>\n<p translation-origin=\"off\">A <code>Subject</code> is both a source of <em>observable</em> values and an <code>Observable</code> itself.\nYou can subscribe to a <code>Subject</code> as you would any <code>Observable</code>.</p>\n<p translation-result=\"\"><code>Subject</code> 既是可观察对象的数据源，本身也是 <code>Observable</code>。\n你可以像订阅任何 <code>Observable</code> 一样订阅 <code>Subject</code>。</p>\n<p translation-origin=\"off\">You can also push values into that <code>Observable</code> by calling its <code>next(value)</code> method\nas the <code>search()</code> method does.</p>\n<p translation-result=\"\">你还可以通过调用它的 <code>next(value)</code> 方法往 <code>Observable</code> 中推送一些值，就像 <code>search()</code> 方法中一样。</p>\n<p translation-origin=\"off\">The <code>search()</code> method is called via an <em>event binding</em> to the\ntextbox's <code>keystroke</code> event.</p>\n<p translation-result=\"\"><code>search()</code> 是通过对文本框的 <code>keystroke</code> 事件的<em>事件绑定</em>来调用的。</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.html\" region=\"input\">\n&#x3C;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" />\n\n</code-example>\n<p translation-origin=\"off\">Every time the user types in the textbox, the binding calls <code>search()</code> with the textbox value, a \"search term\".\nThe <code>searchTerms</code> becomes an <code>Observable</code> emitting a steady stream of search terms.</p>\n<p translation-result=\"\">每当用户在文本框中输入时，这个事件绑定就会使用文本框的值（搜索词）调用 <code>search()</code> 函数。\n<code>searchTerms</code> 变成了一个能发出搜索词的稳定的流。</p>\n<a id=\"search-pipe\"></a>\n<h3 translation-origin=\"off\" id=\"chaining-rxjs-operators\">Chaining RxJS operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3>\n<h3 translation-result=\"\" id=\"chaining-rxjs-operators\">串联 RxJS 操作符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#chaining-rxjs-operators\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-origin=\"off\">Passing a new search term directly to the <code>searchHeroes()</code> after every user keystroke would create an excessive amount of HTTP requests,\ntaxing server resources and burning through the cellular network data plan.</p>\n<p translation-result=\"\">如果每当用户击键后就直接调用 <code>searchHeroes()</code> 将导致创建海量的 HTTP 请求，浪费服务器资源并消耗大量网络流量。</p>\n<p translation-origin=\"off\">Instead, the <code>ngOnInit()</code> method pipes the <code>searchTerms</code> observable through a sequence of RxJS operators that reduce the number of calls to the <code>searchHeroes()</code>,\nultimately returning an observable of timely hero search results (each a <code>Hero[]</code>).</p>\n<p translation-result=\"\">应该怎么做呢？<code>ngOnInit()</code> 往 <code>searchTerms</code> 这个可观察对象的处理管道中加入了一系列 RxJS 操作符，用以缩减对 <code>searchHeroes()</code> 的调用次数，并最终返回一个可及时给出英雄搜索结果的可观察对象（每次都是 <code>Hero[]</code> ）。</p>\n<p translation-origin=\"off\">Here's the code.</p>\n<p translation-result=\"\">代码如下：</p>\n<code-example path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\" region=\"search\">\nthis.heroes$ = this.searchTerms.pipe(\n  // wait 300ms after each keystroke before considering the term\n  debounceTime(300),\n\n  // ignore new term if same as previous term\n  distinctUntilChanged(),\n\n  // switch to new search observable each time the term changes\n  switchMap((term: string) => this.heroService.searchHeroes(term)),\n);\n\n</code-example>\n<ul>\n<li>\n<p translation-origin=\"off\"><code>debounceTime(300)</code> waits until the flow of new string events pauses for 300 milliseconds\nbefore passing along the latest string. You'll never make requests more frequently than 300ms.</p>\n<p translation-result=\"\">   在传出最终字符串之前，<code>debounceTime(300)</code> 将会等待，直到新增字符串的事件暂停了 300 毫秒。\n你实际发起请求的间隔永远不会小于 300ms。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><code>distinctUntilChanged()</code> ensures that a request is sent only if the filter text changed.</p>\n<p translation-result=\"\"> <code>distinctUntilChanged()</code> 会确保只在过滤条件变化时才发送请求。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><code>switchMap()</code> calls the search service for each search term that makes it through <code>debounce</code> and <code>distinctUntilChanged</code>.\nIt cancels and discards previous search observables, returning only the latest search service observable.</p>\n<p translation-result=\"\">   <code>switchMap()</code> 会为每个从 <code>debounce</code> 和 <code>distinctUntilChanged</code> 中通过的搜索词调用搜索服务。\n它会取消并丢弃以前的搜索可观察对象，只保留最近的。</p>\n</li>\n</ul>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">  With the <a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap operator</a>,\nevery qualifying key event can trigger an <code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code> method call.\nEven with a 300ms pause between requests, you could have multiple HTTP requests in flight\nand they may not return in the order sent.</p>\n<p translation-result=\"\">  借助 <a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap 操作符</a>，\n每个有效的击键事件都会触发一次 <code><a href=\"\" class=\"code-anchor\">HttpClient.get()</a></code> 方法调用。\n即使在每个请求之间都有至少 300ms 的间隔，仍然可能会同时存在多个尚未返回的 HTTP 请求。</p>\n<p translation-origin=\"off\">  <code>switchMap()</code> preserves the original request order while returning only the observable from the most recent HTTP method call.\nResults from prior calls are canceled and discarded.</p>\n<p translation-result=\"\">  <code>switchMap()</code> 会记住原始的请求顺序，只会返回最近一次 HTTP 方法调用的结果。\n以前的那些请求都会被取消和舍弃。</p>\n<p translation-origin=\"off\">  Note that <em>canceling</em> a previous <code>searchHeroes()</code> <em>Observable</em>\ndoesn't actually abort a pending HTTP request.\nUnwanted results are simply discarded before they reach your application code.</p>\n<p translation-result=\"\">  注意，<em>取消</em>前一个 <code>searchHeroes()</code> 可观察对象并不会中止尚未完成的 HTTP 请求。\n那些不想要的结果只会在它们抵达应用代码之前被舍弃。</p>\n</div>\n<p translation-origin=\"off\">Remember that the component <em>class</em> does not subscribe to the <code>heroes$</code> <em>observable</em>.\nThat's the job of the <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> in the template.</p>\n<p translation-result=\"\">记住，组件类中并没有订阅 <code>heroes$</code> 这个可观察对象，而是由模板中的 <a href=\"tutorial/toh-pt6#asyncpipe\"><code>AsyncPipe</code></a> 完成的。</p>\n<h4 translation-origin=\"off\" id=\"try-it\">Try it<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#try-it\"><i class=\"material-icons\">link</i></a></h4>\n<h4 translation-result=\"\" id=\"try-it-3\">试试看<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#try-it-3\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-origin=\"off\">Run the app again. In the <em>Dashboard</em>, enter some text in the search box.\nIf you enter characters that match any existing hero names, you'll see something like this.</p>\n<p translation-result=\"\">再次运行本应用。在这个 <em>仪表盘</em> 中，在搜索框中输入一些文字。如果你输入的字符匹配上了任何现有英雄的名字，你将会看到如下效果：</p>\n<figure>\n  <img src=\"generated/images/guide/toh/toh-hero-search.png\" alt=\"Hero Search Component\" width=\"240\" height=\"224\">\n</figure>\n<h2 translation-origin=\"off\" id=\"final-code-review\">Final code review<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#final-code-review\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"final-code-review-6\">查看最终代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#final-code-review-6\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">Your app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">你的应用现在变成了这样：<live-example></live-example>。</p>\n<p translation-origin=\"off\">Here are the code files discussed on this page (all in the <code>src/app/</code> folder).</p>\n<p translation-result=\"\">本文讨论过的代码文件如下（都位于 <code>src/app/</code> 文件夹中）。</p>\n<a id=\"heroservice\"></a>\n<a id=\"inmemorydataservice\"></a>\n<a id=\"appmodule\"></a>\n<h4 translation-origin=\"off\" id=\"heroservice-inmemorydataservice-appmodule\"><em>HeroService</em>, <em>InMemoryDataService</em>, <em>AppModule</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane title=\"hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({ 'Content-Type': 'application/json' })\n};\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  constructor(\n    private http: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes (): Observable&#x3C;Hero[]> {\n    return this.http.get&#x3C;Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(heroes => this.log(`fetched heroes`)),\n        catchError(this.handleError('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>>(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get&#x3C;Hero[]>(url)\n      .pipe(\n        map(heroes => heroes[0]), // returns <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {0|1} element array\n        tap(h => {\n          const outcome = h ? `fetched` : `did not find`;\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable&#x3C;Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&#x3C;Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError&#x3C;Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable&#x3C;Hero[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get&#x3C;Hero[]>(`api/heroes/?name=${term}`).pipe(\n      tap(_ => this.log(`found heroes matching \"${term}\"`)),\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new hero to the server */\n  addHero (hero: Hero): Observable&#x3C;Hero> {\n    return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions).pipe(\n      tap((hero: Hero) => this.log(`added hero w/ id=${hero.id}`)),\n      catchError(this.handleError&#x3C;Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero (hero: Hero | number): Observable&#x3C;Hero> {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete&#x3C;Hero>(url, httpOptions).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError&#x3C;Hero>('deleteHero'))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero (hero: Hero): Observable&#x3C;any> {\n    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError&#x3C;any>('updateHero'))\n    );\n  }\n\n  /**\n   * Handle <a href=\"api/http/Http\" class=\"code-anchor\">Http</a> operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError&#x3C;T> (operation = 'operation', result?: T) {\n    return (error: any): Observable&#x3C;T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add('HeroService: ' + message);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\">\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\n\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Mr. Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app.module.ts\" path=\"toh-pt6/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> }    from '@angular/common/http';\n\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\nimport { AppRoutingModule }     from './app-routing.module';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { HeroSearchComponent }  from './hero-search/hero-search.component';\nimport { MessagesComponent }    from './messages/messages.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n\n    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests\n    // and returns simulated server responses.\n    // Remove it when <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> real server is ready to receive requests.\n    HttpClientInMemoryWebApiModule.forRoot(\n      InMemoryDataService, { dataEncapsulation: false }\n    )\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent,\n    HeroSearchComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-pane>\n</code-tabs>\n<a id=\"heroescomponent\"></a>\n<h4 translation-origin=\"off\" id=\"heroescomponent\"><em>HeroesComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroescomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane title=\"heroes/heroes.component.html\" path=\"toh-pt6/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n\n&#x3C;div>\n  &#x3C;label>Hero name:\n    &#x3C;input #heroName />\n  &#x3C;/label>\n  &#x3C;!-- (click) passes input value to add() and then clears the input -->\n  &#x3C;button (click)=\"add(heroName.value); heroName.value=''\">\n    add\n  &#x3C;/button>\n&#x3C;/div>\n\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n    &#x3C;button class=\"delete\" title=\"delete hero\"\n    (click)=\"delete(hero)\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n\n\n</code-pane>\n  <code-pane title=\"heroes/heroes.component.ts\" path=\"toh-pt6/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes);\n  }\n\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.heroService.addHero({ name } as Hero)\n      .subscribe(hero => {\n        this.heroes.push(hero);\n      });\n  }\n\n  delete(hero: Hero): void {\n    this.heroes = this.heroes.filter(h => h !== hero);\n    this.heroService.deleteHero(hero).subscribe();\n  }\n\n}\n\n\n</code-pane>\n  <code-pane title=\"heroes/heroes.component.css\" path=\"toh-pt6/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n\n.heroes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  color: #888;\n  text-decoration: none;\n  position: relative;\n  display: block;\n  width: 250px;\n}\n\n.heroes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:hover {\n  color:#607D8B;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\nbutton {\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n  font-family: Arial;\n}\n\nbutton:hover {\n  background-color: #cfd8dc;\n}\n\nbutton.delete {\n  position: relative;\n  left: 194px;\n  top: -32px;\n  background-color: gray !important;\n  color: white;\n}\n\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herodetailcomponent\"></a>\n<h4 translation-origin=\"off\" id=\"herodetailcomponent\"><em>HeroDetailComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane title=\"hero-detail/hero-detail.component.html\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>{{ hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> }} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;button (click)=\"goBack()\">go back&#x3C;/button>\n  &#x3C;button (click)=\"save()\">save&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane title=\"hero-detail/hero-detail.component.ts\" path=\"toh-pt6/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero }         from '../hero';\nimport { HeroService }  from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.heroService.getHero(id)\n      .subscribe(hero => this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n\n save(): void {\n    this.heroService.updateHero(this.hero)\n      .subscribe(() => this.goBack());\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herosearchcomponent\"></a>\n<h4 translation-origin=\"off\" id=\"herosearchcomponent\"><em>HeroSearchComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herosearchcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane title=\"hero-search/hero-search.component.html\" path=\"toh-pt6/src/app/hero-search/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;h4>Hero Search&#x3C;/h4>\n\n  &#x3C;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" />\n\n  &#x3C;ul class=\"search-result\">\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\" >\n      &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n        {{hero.name}}\n      &#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n    &#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane title=\"hero-search/hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search/hero-search.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport {\n   debounceTime, distinctUntilChanged, switchMap\n } from 'rxjs/operators';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ]\n})\nexport class HeroSearchComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes$: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(private heroService: HeroService) {}\n\n  // Push <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes$ = this.searchTerms.pipe(\n      // wait 300ms after each keystroke before considering the term\n      debounceTime(300),\n\n      // ignore new term if same as previous term\n      distinctUntilChanged(),\n\n      // switch to new search observable each time the term changes\n      switchMap((term: string) => this.heroService.searchHeroes(term)),\n    );\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"hero-search/hero-search.component.css\" path=\"toh-pt6/src/app/hero-search/hero-search.component.css\">\n/* HeroSearch private styles */\n.search-result li {\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  width:195px;\n  height: 16px;\n  padding: 5px;\n  background-color: white;\n  cursor: pointer;\n  list-style-type: none;\n}\n\n.search-result li:hover {\n  background-color: #607D8B;\n}\n\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> {\n  color: #888;\n  display: block;\n  text-decoration: none;\n}\n\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:hover {\n  color: white;\n}\n.search-result li <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>:active {\n  color: white;\n}\n#search-box {\n  width: 200px;\n  height: 20px;\n}\n\n\nul.search-result {\n  margin-top: 0;\n  padding-left: 0;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 translation-origin=\"off\" id=\"summary\">Summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#summary\"><i class=\"material-icons\">link</i></a></h2>\n<h2 translation-result=\"\" id=\"summary-16\">小结<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#summary-16\"><i class=\"material-icons\">link</i></a></h2>\n<p translation-origin=\"off\">You're at the end of your journey, and you've accomplished a lot.</p>\n<p translation-result=\"\">旅程即将结束，不过你已经收获颇丰。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">You added the necessary dependencies to use HTTP in the app.</p>\n<p translation-result=\"\"> 你添加了在应用程序中使用 HTTP 的必备依赖。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You refactored <code>HeroService</code> to load heroes from a web API.</p>\n<p translation-result=\"\"> 你重构了 <code>HeroService</code>，以通过 web API 来加载英雄数据。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You extended <code>HeroService</code> to support <code>post()</code>, <code>put()</code>, and <code>delete()</code> methods.</p>\n<p translation-result=\"\"> 你扩展了 <code>HeroService</code> 来支持 <code>post()</code>、<code>put()</code> 和 <code>delete()</code> 方法。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You updated the components to allow adding, editing, and deleting of heroes.</p>\n<p translation-result=\"\"> 你修改了组件，以允许用户添加、编辑和删除英雄。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You configured an in-memory web API.</p>\n<p translation-result=\"\"> 你配置了一个内存 Web API。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You learned how to use observables.</p>\n<p translation-result=\"\"> 你学会了如何使用“可观察对象”。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">This concludes the \"Tour of Heroes\" tutorial.\nYou're ready to learn more about Angular development in the fundamentals section,\nstarting with the <a href=\"guide/architecture\" title=\"Architecture\">Architecture</a> guide.</p>\n<p translation-result=\"\">《英雄指南》教程结束了。\n如果你准备开始学习 Angular 开发的原理，请开始 <a href=\"guide/architecture\" title=\"Architecture\">架构</a> 一章。</p>\n\n</div>\n<!-- links to this doc:\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/Location\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/common/http/HttpHeaders\n - api/core/Component\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModule#imports\n - api/core/OnInit\n - api/core/testing/async\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/http/Http\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Data\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - guide/architecture\n - tutorial/toh-pt6#add-a-new-hero\n - tutorial/toh-pt6#add-emheroserviceaddheroem\n - tutorial/toh-pt6#add-emheroservicedeleteheroem\n - tutorial/toh-pt6#add-emheroserviceupdateheroem\n - tutorial/toh-pt6#add-heroserviceaddhero\n - tutorial/toh-pt6#add-heroservicedeletehero\n - tutorial/toh-pt6#add-heroserviceupdatehero\n - tutorial/toh-pt6#add-search-to-the-dashboard\n - tutorial/toh-pt6#asyncpipe\n - tutorial/toh-pt6#chaining-rxjs-operators\n - tutorial/toh-pt6#create-emherosearchcomponentem\n - tutorial/toh-pt6#create-herosearchcomponent\n - tutorial/toh-pt6#delete-a-hero\n - tutorial/toh-pt6#emhttpclientgetem-returns-response-data\n - tutorial/toh-pt6#enable-http-services\n - tutorial/toh-pt6#error-handling\n - tutorial/toh-pt6#error-handling-4\n - tutorial/toh-pt6#final-code-review\n - tutorial/toh-pt6#final-code-review-6\n - tutorial/toh-pt6#fix-the-emherosearchcomponentem-class\n - tutorial/toh-pt6#fix-the-herosearchcomponent-class\n - tutorial/toh-pt6#get-hero-by-id\n - tutorial/toh-pt6#get-heroes-with-emhttpclientem\n - tutorial/toh-pt6#get-heroes-with-httpclient\n - tutorial/toh-pt6#handleerror\n - tutorial/toh-pt6#herodetailcomponent\n - tutorial/toh-pt6#heroes-and-http\n - tutorial/toh-pt6#heroescomponent\n - tutorial/toh-pt6#herosearchcomponent\n - tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule\n - tutorial/toh-pt6#heroservicesearchheroes\n - tutorial/toh-pt6#http\n - tutorial/toh-pt6#http-methods-return-one-value\n - tutorial/toh-pt6#httpclientget-returns-response-data\n - tutorial/toh-pt6#import-heroes\n - tutorial/toh-pt6#search-by-name\n - tutorial/toh-pt6#search-pipe\n - tutorial/toh-pt6#simulate-a-data-server\n - tutorial/toh-pt6#summary\n - tutorial/toh-pt6#summary-16\n - tutorial/toh-pt6#tap-into-the-emobservableem\n - tutorial/toh-pt6#tap-into-the-observable\n - tutorial/toh-pt6#the-emsearchtermsem-rxjs-subject\n - tutorial/toh-pt6#the-searchterms-rxjs-subject\n - tutorial/toh-pt6#try-it\n - tutorial/toh-pt6#try-it-3\n - tutorial/toh-pt6#update-heroes\n - http://www.learnrxjs.io/operators/transformation/switchmap.html\n - https://github.com/angular/in-memory-web-api\n-->"
}