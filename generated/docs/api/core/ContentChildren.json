{
  "id": "api/core/ContentChildren",
  "title": "ContentChildren",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/angular/angular/edit/master/packages/core/src/metadata/di.ts?message=docs(core)%3A%20describe%20your%20change...#L177-L184\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/angular/angular/tree/6.0.0/packages/core/src/metadata/di.ts#L177-L184\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n        ]\n      }\n    </script>\n    \n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"contentchildren\">ContentChildren<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ContentChildren#contentchildren\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label decorator\">decorator</label>\n    \n    \n    \n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p translation-origin=\"off\">Type of the ContentChildren metadata.</p>\n<p></p>\n  \n  \n  \n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ContentChildren#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-origin=\"off\">You can use ContentChildren to get the <a href=\"api/core/QueryList\"><code>QueryList</code></a> of elements or directives from the\ncontent DOM. Any time a child element is added, removed, or moved, the query list will be\nupdated,\nand the changes observable of the query list will emit a new value.</p>\n<p translation-origin=\"off\">Content queries are set before the <code>ngAfterContentInit</code> callback is called.</p>\n<p translation-origin=\"off\"><strong>Metadata Properties</strong>:</p>\n<ul>\n<li><strong>selector</strong> - the directive type or the name used for querying.</li>\n<li><strong>descendants</strong> - include only direct children or all descendants.</li>\n<li><strong>read</strong> - read a different token from the queried elements.</li>\n</ul>\n<p translation-origin=\"off\">Let's look at an example:</p>\n<code-example>\nimport {<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>, <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a>} from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({selector: 'pane'})\nexport class Pane {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() id: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'tab',\n  template: `\n    &#x3C;div class=\"top-level\">Top level panes: {{serializedPanes}}&#x3C;/div> \n    &#x3C;div class=\"nested\">Arbitrary nested panes: {{serializedNestedPanes}}&#x3C;/div>\n  `\n})\nexport class Tab {\n  @<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(Pane) topLevelPanes: <a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a>&#x3C;Pane>;\n  @<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(Pane, {descendants: true}) arbitraryNestedPanes: <a href=\"api/core/QueryList\" class=\"code-anchor\">QueryList</a>&#x3C;Pane>;\n\n  get serializedPanes(): string {\n    return this.topLevelPanes ? this.topLevelPanes.map(p => p.id).join(', ') : '';\n  }\n  get serializedNestedPanes(): string {\n    return this.arbitraryNestedPanes ? this.arbitraryNestedPanes.map(p => p.id).join(', ') : '';\n  }\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'example-app',\n  template: `\n    &#x3C;tab>\n      &#x3C;pane id=\"1\">&#x3C;/pane>\n      &#x3C;pane id=\"2\">&#x3C;/pane>\n      &#x3C;pane id=\"3\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"shouldShow\">\n        &#x3C;tab>\n          &#x3C;pane id=\"3_1\">&#x3C;/pane>\n          &#x3C;pane id=\"3_2\">&#x3C;/pane>\n        &#x3C;/tab>\n      &#x3C;/pane>\n    &#x3C;/tab>\n    \n    &#x3C;button (click)=\"show()\">Show 3&#x3C;/button>\n  `,\n})\nexport class ContentChildrenComp {\n  shouldShow = false;\n\n  show() { this.shouldShow = true; }\n}\n\n</code-example>\n<p translation-origin=\"off\"><strong>npm package</strong>: <code>@angular/core</code></p>\n<p translation-origin=\"off\">@Annotation</p>\n\n</section>\n\n  \n\n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/core\n - api/core/ContentChildrenDecorator\n - api/core/Directive\n - api/core/Query\n - api/core/QueryList\n - guide/aot-compiler\n - guide/cheatsheet\n - guide/dependency-injection-in-action\n - guide/lifecycle-hooks\n-->\n<!-- links from this doc:\n - api/common/NgIf\n - api/core/Component\n - api/core/ContentChildren#contentchildren\n - api/core/ContentChildren#description\n - api/core/Directive\n - api/core/Input\n - api/core/QueryList\n - https://github.com/angular/angular/edit/master/packages/core/src/metadata/di.ts?message=docs(core)%3A%20describe%20your%20change...#L177-L184\n - https://github.com/angular/angular/tree/6.0.0/packages/core/src/metadata/di.ts#L177-L184\n-->"
}