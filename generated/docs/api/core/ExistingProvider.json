{
  "id": "api/core/ExistingProvider",
  "title": "ExistingProvider",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/angular/angular/edit/master/packages/core/src/di/provider.ts?message=docs(core)%3A%20describe%20your%20change...#L229-L262\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/angular/angular/tree/6.0.0/packages/core/src/di/provider.ts#L229-L262\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/core\", \"name\": \"@angular/core\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/core/ExistingProvider\", \"name\": \"ExistingProvider\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/core\">@angular/core</a>\n  </div>\n  <header class=\"api-header\">\n    <h1 id=\"existingprovider\">ExistingProvider<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#existingprovider\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p translation-origin=\"off\">Configures the <code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code> to return a value of another <code>useExisting</code> token.</p>\n<p></p>\n  \n  \n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/core/ExistingProvider\" class=\"code-anchor\">ExistingProvider</a> extends <a class=\"code-anchor\" href=\"\">ExistingSansProvider</a> {\n  <a class=\"code-anchor\" href=\"api/core/ExistingProvider#provide\">provide: any</a>\n  <a class=\"code-anchor\" href=\"api/core/ExistingProvider#multi\">multi?: boolean</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-origin=\"off\">For more details, see the <a href=\"guide/dependency-injection\">\"Dependency Injection Guide\"</a>.</p>\n<h3 translation-origin=\"off\" id=\"example\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#example\"><i class=\"material-icons\">link</i></a></h3>\n<code-example>\nclass Greeting {\n  salutation = 'Hello';\n}\n\nclass FormalGreeting extends Greeting {\n  salutation = 'Greetings';\n}\n\nconst injector = Injector.create([\n  {provide: FormalGreeting, deps: []}, {provide: Greeting, useExisting: FormalGreeting}\n]);\n\nexpect(injector.get(Greeting).salutation).toEqual('Greetings');\nexpect(injector.get(FormalGreeting).salutation).toEqual('Greetings');\nexpect(injector.get(FormalGreeting)).toBe(injector.get(Greeting));\n\n</code-example>\n\n</section>\n\n  \n<section class=\"instance-properties\">\n  <h2 id=\"properties\">Properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>Property</th><th>Type</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"provide\"></a>provide</td>\n        <td><label class=\"property-type-label\"><code>any</code></label></td>\n        <td>\n          <p translation-origin=\"off\">An injection token. (Typically an instance of <code><a href=\"api/core/Type\" class=\"code-anchor\">Type</a></code> or <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code>, but can be <code>any</code>).</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"multi\"></a>multi</td>\n        <td><label class=\"property-type-label\"><code>boolean</code></label></td>\n        <td>\n          <p translation-origin=\"off\">If true, then injector returns an array of instances. This is useful to allow multiple\nproviders spread across many files to provide configuration information to a common token.</p>\n\n          <h3 translation-origin=\"off\" id=\"example-1\">Example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#example-1\"><i class=\"material-icons\">link</i></a></h3>\n<code-example>\nconst locale = new <a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a>&#x3C;string[]>('locale');\nconst injector = Injector.create([\n  {provide: locale, multi: true, useValue: 'en'},\n  {provide: locale, multi: true, useValue: 'sk'},\n]);\n\nconst locales: string[] = injector.get(locale);\nexpect(locales).toEqual(['en', 'sk']);\n\n</code-example>\n\n          \n        </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">Usage Notes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <code-example>\nconst provider: <a href=\"api/core/ExistingProvider\" class=\"code-anchor\">ExistingProvider</a> = {provide: 'someToken', useExisting: 'someOtherToken'};\n</code-example>\n\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/core\n - api/core/Provider\n - api/core/StaticProvider\n-->\n<!-- links from this doc:\n - /api\n - api/core\n - api/core/ExistingProvider#description\n - api/core/ExistingProvider#example\n - api/core/ExistingProvider#example-1\n - api/core/ExistingProvider#existingprovider\n - api/core/ExistingProvider#multi\n - api/core/ExistingProvider#properties\n - api/core/ExistingProvider#provide\n - api/core/ExistingProvider#usage-notes\n - api/core/InjectionToken\n - api/core/Injector\n - api/core/Type\n - guide/dependency-injection\n - https://github.com/angular/angular/edit/master/packages/core/src/di/provider.ts?message=docs(core)%3A%20describe%20your%20change...#L229-L262\n - https://github.com/angular/angular/tree/6.0.0/packages/core/src/di/provider.ts#L229-L262\n-->"
}